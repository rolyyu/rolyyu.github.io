<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android-Studio中-gitignore的配置</title>
    <url>/2016/11/15/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>如果你使用git 作版本控制工具，那么你可以轻松的使用android studio &#x2F; Intellij IDEA 的.gitignore 插件来生成一份可以将这些文件排除在外的.gitignore 过滤清单。</p>
<span id="more"></span> 

<h1 id="Android-Studio-项目目录结构"><a href="#Android-Studio-项目目录结构" class="headerlink" title="Android Studio 项目目录结构"></a>Android Studio 项目目录结构</h1><p>在项目目录下找到.gitignore文件（一般有两个地方存在该文件：一是根目录下，一是app目录下）， 在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以通过配置.gitignore文件让Git不跟踪配置的文件。</p>
<p> <img src="/2016/11/15/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE1.png" alt="Android-Studio中-gitignore的配置1"></p>
<blockquote>
<p>其中：</p>
<ul>
<li>.gradle 是gradle 运行以后生成的缓存文件夹。</li>
<li>.idea 是android studio &#x2F; Intellij IDEA 工程打开以后生成的工作环境配置文件夹。</li>
<li>app 文件夹是你的application module，其中包含你的源码。</li>
<li>build 文件夹为编译时的缓存文件夹，每次运行时都会生成，同时你在运行了gradle clean 的任务以后它会被删除清理掉。</li>
<li>gradle 文件夹中包含的是gradle-wrapper.jar 文件，通过配置其中的gradle-wrapper.properties 中的distributionUrl 可以给你的项目指定需要使用的gradle 版本。</li>
<li>.gitignore 文件为git 版本控制的忽略清单。</li>
<li>gradle.build 为project 全局的配置。</li>
<li>gradle.properties 为 gradle 的参数配置。</li>
<li>*.iml 文件为Android Studio &#x2F; Intellij IDEA 为每一个module 生成的配置文件</li>
<li>gradlew gradlew.bat 是gradle 任务的脚本命令。</li>
<li>local.properties 中配置个人电脑环境中的配置，这不能提供给别人使用。</li>
<li>settings.gradle 文件中可指定project 目录中的任何一个文件夹为gradle 的module</li>
</ul>
</blockquote>
<h1 id="Android-开发-gitignore-的配置"><a href="#Android-开发-gitignore-的配置" class="headerlink" title="Android 开发 .gitignore 的配置"></a>Android 开发 .gitignore 的配置</h1><p>如果你使用git 作版本控制工具，那么你可以轻松的使用android studio &#x2F; Intellij IDEA 的.gitignore 插件来生成一份可以将这些文件排除在外的.gitignore 过滤清单。这样在你使用git 分发代码时，这些不必要的文件将不会被提交到git server 中去。</p>
<h2 id="gitignore插件"><a href="#gitignore插件" class="headerlink" title=".gitignore插件"></a>.gitignore插件</h2><p> <img src="/2016/11/15/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE2.png" alt="Android-Studio中-gitignore的配置1"></p>
<p>打开项目目录中的.gitignore，然后使用快捷键<strong>Ctrl+N</strong>打开<strong>Generate</strong>：</p>
<p> <img src="/2016/11/15/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE3.png" alt="Android-Studio中-gitignore的配置1"></p>
<h2 id="自定义的-gitignore模板"><a href="#自定义的-gitignore模板" class="headerlink" title="自定义的.gitignore模板"></a>自定义的.gitignore模板</h2><p> <img src="/2016/11/15/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE/Android-Studio%E4%B8%AD-gitignore%E7%9A%84%E9%85%8D%E7%BD%AE4.png" alt="Android-Studio中-gitignore的配置1"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">###Android###</span></span><br><span class="line"><span class="comment"># Built application files</span></span><br><span class="line">*.apk</span><br><span class="line">*.ap_</span><br><span class="line"></span><br><span class="line"><span class="comment"># Files for the ART/Dalvik VM</span></span><br><span class="line">*.dex</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java class files</span></span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generated files</span></span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line">out/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gradle files</span></span><br><span class="line">.gradle/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Local configuration file (sdk path, etc)</span></span><br><span class="line">local.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># Proguard folder generated by Eclipse</span></span><br><span class="line">proguard/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log Files</span></span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Crashlytics plugin (for Android Studio and IntelliJ)</span></span><br><span class="line">com_crashlytics_export_strings.xml</span><br><span class="line">crashlytics.properties</span><br><span class="line">crashlytics<span class="literal">-build</span>.properties</span><br><span class="line">fabric.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android Studio Navigation editor temp files</span></span><br><span class="line">.navigation/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android Studio captures folder</span></span><br><span class="line">captures/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Keystore files</span></span><br><span class="line">*.jks</span><br><span class="line"></span><br><span class="line"><span class="comment"># External native build folder generated in Android Studio 2.2 and later</span></span><br><span class="line">.externalNativeBuild</span><br><span class="line"></span><br><span class="line"><span class="comment">###macOS###</span></span><br><span class="line">*.DS_Store</span><br><span class="line">.AppleDouble</span><br><span class="line">.LSOverride</span><br><span class="line"></span><br><span class="line"><span class="comment"># Icon must end with two \r</span></span><br><span class="line">Icon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Thumbnails</span></span><br><span class="line">._*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Files that might appear in the root of a volume</span></span><br><span class="line">.DocumentRevisions<span class="literal">-V100</span></span><br><span class="line">.fseventsd</span><br><span class="line">.Spotlight<span class="literal">-V100</span></span><br><span class="line">.TemporaryItems</span><br><span class="line">.Trashes</span><br><span class="line">.VolumeIcon.icns</span><br><span class="line">.com.apple.timemachine.donotpresent</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directories potentially created on remote AFP share</span></span><br><span class="line">.AppleDB</span><br><span class="line">.AppleDesktop</span><br><span class="line">Network Trash Folder</span><br><span class="line">Temporary Items</span><br><span class="line">.apdisk</span><br><span class="line"></span><br><span class="line"><span class="comment">###Linux###</span></span><br><span class="line">*~</span><br><span class="line"></span><br><span class="line"><span class="comment"># temporary files which can be created if a process still has a handle open of a deleted file</span></span><br><span class="line">.fuse_hidden*</span><br><span class="line"></span><br><span class="line"><span class="comment"># KDE directory preferences</span></span><br><span class="line">.directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux trash folder which might appear on any partition or disk</span></span><br><span class="line">.Trash-*</span><br><span class="line"></span><br><span class="line"><span class="comment"># .nfs files are created when an open file is removed but is still being accessed</span></span><br><span class="line">.nfs*</span><br><span class="line"></span><br><span class="line"><span class="comment">###Windows###</span></span><br><span class="line"><span class="comment"># Windows image file caches</span></span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line"></span><br><span class="line"><span class="comment"># Folder config file</span></span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># Recycle Bin used on file shares</span></span><br><span class="line"><span class="variable">$RECYCLE</span>.BIN/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows Installer files</span></span><br><span class="line">*.cab</span><br><span class="line">*.msi</span><br><span class="line">*.msm</span><br><span class="line">*.msp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows shortcuts</span></span><br><span class="line">*.lnk</span><br><span class="line"><span class="comment">###IntelliJ###</span></span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">.idea/</span><br><span class="line">app/libs/</span><br></pre></td></tr></table></figure>

<h1 id="gitignore配置不生效的解决办法"><a href="#gitignore配置不生效的解决办法" class="headerlink" title=".gitignore配置不生效的解决办法"></a>.gitignore配置不生效的解决办法</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> <span class="literal">-r</span> <span class="literal">--cached</span> .</span><br><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;update .gitignore&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>就是先把本地缓存删除（改变成未track状态），然后再提交。</p>
</blockquote>
<h1 id="其他-gitignore的配置"><a href="#其他-gitignore的配置" class="headerlink" title="其他.gitignore的配置"></a>其他.gitignore的配置</h1><p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表，你可以在 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a>  找到它。各种配置文件，只需要组合一下就可以使用了。</p>
<p>参考文献</p>
<p>[1] <a href="https://www.zhihu.com/question/33048493">https://www.zhihu.com/question/33048493</a></p>
<p>[2] <a href="http://blog.csdn.net/watermusicyes/article/details/50348967">http://blog.csdn.net/watermusicyes/article/details/50348967</a></p>
<p>[3] <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93">https://git-scm.com/book/zh/v2/Git-基础-记录每次更新到仓库</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Analyzing control flow in ffmpeg.c source file with cflow</title>
    <url>/2024/03/05/Analyzing-control-flow-in-ffmpeg-c-source-file-with-cflow/</url>
    <content><![CDATA[<p>用cflow分析ffmpeg.c源文件中的函数调用图, <a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%91%BC%E5%8F%AB%E5%9C%96"><strong>函数调用图</strong></a>（call graph，也称为call multigraph），属于<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E6%B5%81%E5%9C%96">控制流图</a>，可以展示程序中函数之间的关系。函数调用图可以由动态程序分析产生（动态函数调用图），也可以由静态程序分析产生（静态函数调用图）</p>
<span id="more"></span> 

<h2 id="GNU-cflow"><a href="#GNU-cflow" class="headerlink" title="GNU cflow"></a>GNU cflow</h2><p><strong>GNU cflow</strong> is a <a href="https://en.wikipedia.org/wiki/Call_graph">flow graph generator</a> that is part of the <a href="https://en.wikipedia.org/wiki/GNU_Project">GNU Project</a>. It’s able to generate the direct and inverted call graph of a C program</p>
<p><img src="/2024/03/05/Analyzing-control-flow-in-ffmpeg-c-source-file-with-cflow/Analyzing-control-flow-in-ffmpeg-c-source-file-with-cflow1.png" alt="Analyzing-control-flow-in-ffmpeg-c-source-file-with-cflow1"></p>
<h2 id="使用cflow分析ffmpeg-c源文件中的函数调用图"><a href="#使用cflow分析ffmpeg-c源文件中的函数调用图" class="headerlink" title="使用cflow分析ffmpeg.c源文件中的函数调用图"></a>使用cflow分析ffmpeg.c源文件中的函数调用图</h2><p>使用FFmpeg n4.3分支源码，生成下面静态函数调用图，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --branch n4.3 --depth 1 https://github.com/FFmpeg/FFmpeg.git</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cflow fftools/ffmpeg.c</span><br></pre></td></tr></table></figure>

<p>下面是只保留ffmpeg.c中的主要流程的简短的输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main() </span><br><span class="line">    ffmpeg_parse_options()</span><br><span class="line">    transcode() </span><br><span class="line">        transcode_init() </span><br><span class="line">            init_input_stream() </span><br><span class="line">            init_output_stream() </span><br><span class="line">        transcode_step() </span><br><span class="line">            choose_output() </span><br><span class="line">            configure_filtergraph()</span><br><span class="line">            process_input() </span><br><span class="line">                get_input_packet() </span><br><span class="line">                    av_read_frame()</span><br><span class="line">                process_input_packet() </span><br><span class="line">                    decode_audio() </span><br><span class="line">                        decode() </span><br><span class="line">                            avcodec_send_packet()</span><br><span class="line">                            avcodec_receive_frame()</span><br><span class="line">                        send_frame_to_filters() </span><br><span class="line">                            ifilter_send_frame() </span><br><span class="line">                       	        av_buffersrc_add_frame_flags() </span><br><span class="line">                    decode_video() </span><br><span class="line">                        decode()</span><br><span class="line">                            avcodec_send_packet()</span><br><span class="line">                            avcodec_receive_frame()</span><br><span class="line">                        send_frame_to_filters()</span><br><span class="line">                       	    ifilter_send_frame() </span><br><span class="line">                       	        av_buffersrc_add_frame_flags() </span><br><span class="line">                    transcode_subtitles() </span><br><span class="line">                    do_streamcopy() </span><br><span class="line">            reap_filters() </span><br><span class="line">                init_output_stream() </span><br><span class="line">                av_buffersink_get_frame_flags()</span><br><span class="line">                do_video_out() </span><br><span class="line">                    avcodec_send_frame()</span><br><span class="line">                    avcodec_receive_packet()</span><br><span class="line">                    output_packet() </span><br><span class="line">                        write_packet() </span><br><span class="line">                do_audio_out() </span><br><span class="line">                    avcodec_send_frame()</span><br><span class="line">                    avcodec_receive_packet()</span><br><span class="line">                    output_packet() </span><br><span class="line">                        write_packet() </span><br><span class="line">                close_output_stream()</span><br><span class="line">        print_report() </span><br><span class="line">            psnr()</span><br><span class="line">            print_final_stats() </span><br><span class="line">        process_input_packet() </span><br><span class="line">        flush_encoders() </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面是只保留ffmpeg.c中的主要流程的简短的输出(保留行号)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main() &lt;<span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> at fftools/ffmpeg.c:4819&gt;:</span><br><span class="line">    <span class="title function_">ffmpeg_parse_options</span><span class="params">()</span></span><br><span class="line">    <span class="title function_">transcode</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">transcode</span> <span class="params">(<span class="type">void</span>)</span> at fftools/ffmpeg.c:4627&gt;:</span><br><span class="line">        <span class="title function_">transcode_init</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">transcode_init</span> <span class="params">(<span class="type">void</span>)</span> at fftools/ffmpeg.c:3624&gt;:</span><br><span class="line">            <span class="title function_">init_input_stream</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">init_input_stream</span> <span class="params">(<span class="type">int</span> ist_index, <span class="type">char</span> *error, <span class="type">int</span> error_len)</span> at fftools/ffmpeg.c:2870&gt;:</span><br><span class="line">            <span class="title function_">init_output_stream</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">init_output_stream</span> <span class="params">(OutputStream *ost, <span class="type">char</span> *error, <span class="type">int</span> error_len)</span> at fftools/ffmpeg.c:3419&gt;:</span><br><span class="line">        <span class="title function_">transcode_step</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">transcode_step</span> <span class="params">(<span class="type">void</span>)</span> at fftools/ffmpeg.c:4552&gt;:</span><br><span class="line">            <span class="title function_">choose_output</span><span class="params">()</span> &lt;OutputStream *<span class="title function_">choose_output</span> <span class="params">(<span class="type">void</span>)</span> at fftools/ffmpeg.c:3827&gt;:</span><br><span class="line">            <span class="title function_">configure_filtergraph</span><span class="params">()</span></span><br><span class="line">            <span class="title function_">process_input</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">process_input</span> <span class="params">(<span class="type">int</span> file_index)</span> at fftools/ffmpeg.c:4218&gt;:</span><br><span class="line">                <span class="title function_">get_input_packet</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">get_input_packet</span> <span class="params">(InputFile *f, AVPacket *pkt)</span> at fftools/ffmpeg.c:4094&gt;:</span><br><span class="line">                    <span class="title function_">av_read_frame</span><span class="params">()</span></span><br><span class="line">                <span class="title function_">process_input_packet</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">process_input_packet</span> <span class="params">(InputStream *ist, <span class="type">const</span> AVPacket *pkt, <span class="type">int</span> no_eof)</span> at fftools/ffmpeg.c:2547&gt;:</span><br><span class="line">                    <span class="title function_">decode_audio</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">decode_audio</span> <span class="params">(InputStream *ist, AVPacket *pkt, <span class="type">int</span> *got_output, <span class="type">int</span> *decode_failed)</span> at fftools/ffmpeg.c:2259&gt;:</span><br><span class="line">                        <span class="title function_">decode</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">decode</span> <span class="params">(AVCodecContext *avctx, AVFrame *frame, <span class="type">int</span> *got_frame, AVPacket *pkt)</span> at fftools/ffmpeg.c:2210&gt;:</span><br><span class="line">                            <span class="title function_">avcodec_send_packet</span><span class="params">()</span></span><br><span class="line">                            <span class="title function_">avcodec_receive_frame</span><span class="params">()</span></span><br><span class="line">                        <span class="title function_">send_frame_to_filters</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">send_frame_to_filters</span> <span class="params">(InputStream *ist, AVFrame *decoded_frame)</span> at fftools/ffmpeg.c:2233&gt;:</span><br><span class="line">                            <span class="title function_">ifilter_send_frame</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">ifilter_send_frame</span> <span class="params">(InputFilter *ifilter, AVFrame *frame)</span> at fftools/ffmpeg.c:2106&gt;:</span><br><span class="line">                       	        <span class="title function_">av_buffersrc_add_frame_flags</span><span class="params">()</span> </span><br><span class="line">                    <span class="title function_">decode_video</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">decode_video</span> <span class="params">(InputStream *ist, AVPacket *pkt, <span class="type">int</span> *got_output, <span class="type">int64_t</span> *duration_pts, <span class="type">int</span> eof, <span class="type">int</span> *decode_failed)</span> at fftools/ffmpeg.c:2321&gt;:</span><br><span class="line">                        <span class="title function_">decode</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">decode</span> <span class="params">(AVCodecContext *avctx, AVFrame *frame, <span class="type">int</span> *got_frame, AVPacket *pkt)</span> at fftools/ffmpeg.c:2210&gt;:</span><br><span class="line">                            <span class="title function_">avcodec_send_packet</span><span class="params">()</span></span><br><span class="line">                            <span class="title function_">avcodec_receive_frame</span><span class="params">()</span></span><br><span class="line">                        <span class="title function_">send_frame_to_filters</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">send_frame_to_filters</span> <span class="params">(InputStream *ist, AVFrame *decoded_frame)</span> at fftools/ffmpeg.c:2233&gt;:</span><br><span class="line">                       	    <span class="title function_">ifilter_send_frame</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">ifilter_send_frame</span> <span class="params">(InputFilter *ifilter, AVFrame *frame)</span> at fftools/ffmpeg.c:2106&gt;:</span><br><span class="line">                       	        <span class="title function_">av_buffersrc_add_frame_flags</span><span class="params">()</span> </span><br><span class="line">                    <span class="title function_">transcode_subtitles</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">transcode_subtitles</span> <span class="params">(InputStream *ist, AVPacket *pkt, <span class="type">int</span> *got_output, <span class="type">int</span> *decode_failed)</span> at fftools/ffmpeg.c:2454&gt;:</span><br><span class="line">                    <span class="title function_">do_streamcopy</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">do_streamcopy</span> <span class="params">(InputStream *ist, OutputStream *ost, <span class="type">const</span> AVPacket *pkt)</span> at fftools/ffmpeg.c:1979&gt;:</span><br><span class="line">						<span class="title function_">reap_filters</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">reap_filters</span> <span class="params">(<span class="type">int</span> flush)</span> at fftools/ffmpeg.c:1413&gt;:</span><br><span class="line">                <span class="title function_">init_output_stream</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">init_output_stream</span> <span class="params">(OutputStream *ost, <span class="type">char</span> *error, <span class="type">int</span> error_len)</span> at fftools/ffmpeg.c:3419&gt;:</span><br><span class="line">                <span class="title function_">av_buffersink_get_frame_flags</span><span class="params">()</span></span><br><span class="line">                <span class="title function_">do_video_out</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">do_video_out</span> <span class="params">(OutputFile *of, OutputStream *ost, AVFrame *next_picture, <span class="type">double</span> sync_ipts)</span> at fftools/ffmpeg.c:1042&gt;:</span><br><span class="line">                    <span class="title function_">avcodec_send_frame</span><span class="params">()</span></span><br><span class="line">                    <span class="title function_">avcodec_receive_packet</span><span class="params">()</span></span><br><span class="line">                    <span class="title function_">output_packet</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">output_packet</span> <span class="params">(OutputFile *of, AVPacket *pkt, OutputStream *ost, <span class="type">int</span> eof)</span> at fftools/ffmpeg.c:860&gt;:</span><br><span class="line">                        <span class="title function_">write_packet</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">write_packet</span> <span class="params">(OutputFile *of, AVPacket *pkt, OutputStream *ost, <span class="type">int</span> unqueue)</span> at fftools/ffmpeg.c:701&gt;:</span><br><span class="line">                <span class="title function_">do_audio_out</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">do_audio_out</span> <span class="params">(OutputFile *of, OutputStream *ost, AVFrame *frame)</span> at fftools/ffmpeg.c:899&gt;:</span><br><span class="line">                    <span class="title function_">avcodec_send_frame</span><span class="params">()</span></span><br><span class="line">                    <span class="title function_">avcodec_receive_packet</span><span class="params">()</span></span><br><span class="line">                    <span class="title function_">output_packet</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">output_packet</span> <span class="params">(OutputFile *of, AVPacket *pkt, OutputStream *ost, <span class="type">int</span> eof)</span> at fftools/ffmpeg.c:860&gt;:</span><br><span class="line">                        <span class="title function_">write_packet</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">write_packet</span> <span class="params">(OutputFile *of, AVPacket *pkt, OutputStream *ost, <span class="type">int</span> unqueue)</span> at fftools/ffmpeg.c:701&gt;:</span><br><span class="line">                <span class="title function_">close_output_stream</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">close_output_stream</span> <span class="params">(OutputStream *ost)</span> at fftools/ffmpeg.c:838&gt;:</span><br><span class="line">        <span class="title function_">print_report</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">print_report</span> <span class="params">(<span class="type">int</span> is_last_report, <span class="type">int64_t</span> timer_start, <span class="type">int64_t</span> cur_time)</span> at fftools/ffmpeg.c:1634&gt;:</span><br><span class="line">            <span class="title function_">psnr</span><span class="params">()</span> &lt;<span class="type">double</span> <span class="title function_">psnr</span> <span class="params">(<span class="type">double</span> d)</span> at fftools/ffmpeg.c:1344&gt;:</span><br><span class="line">            <span class="title function_">print_final_stats</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">print_final_stats</span> <span class="params">(<span class="type">int64_t</span> total_size)</span> at fftools/ffmpeg.c:1517&gt;:</span><br><span class="line">        <span class="title function_">process_input_packet</span><span class="params">()</span> &lt;<span class="type">int</span> <span class="title function_">process_input_packet</span> <span class="params">(InputStream *ist, <span class="type">const</span> AVPacket *pkt, <span class="type">int</span> no_eof)</span> at fftools/ffmpeg.c:2547&gt;:</span><br><span class="line">        <span class="title function_">flush_encoders</span><span class="params">()</span> &lt;<span class="type">void</span> <span class="title function_">flush_encoders</span> <span class="params">(<span class="type">void</span>)</span> at fftools/ffmpeg.c:1846&gt;:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>FFmpeg</category>
      </categories>
      <tags>
        <tag>FFmpeg</tag>
        <tag>C</tag>
        <tag>call graph</tag>
        <tag>cflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Android NDK 使用 Address Sanitizer</title>
    <url>/2021/09/13/Android-NDK-%E4%BD%BF%E7%94%A8-Address-Sanitizer/</url>
    <content><![CDATA[<p>从 API 级别 27 (Android O MR 1) 开始，Android NDK 支持 <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address Sanitizer</a>（也称为 ASan）。ASan 是一种基于编译器的快速检测工具，用于检测C&#x2F;C++代码中的内存错误。ASan 的 CPU 开销约为 2 倍，代码大小开销在 50% 到 2 倍之间，并且内存开销很大。</p>
<p><strong>注意: ASan在Android 平台上不支持检测内存泄漏！！！</strong></p>
<span id="more"></span> 

<p>ASan 可以检测以下问题：</p>
<ul>
<li>堆栈和堆缓冲区上溢&#x2F;下溢</li>
<li>释放之后的堆使用情况</li>
<li>超出范围的堆栈使用情况</li>
<li>重复释放&#x2F;错误释放</li>
</ul>
<p>ASan 可在 32 位和 64 位 ARM 以及 x86 和 x86-64 上运行。Android NDK 也支持 <a href="https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html">HWAddress Sanitizer</a>（也称为 HWASan）。与ASan 相比，HWASan功能类似，开销较小，但是使用麻烦。</p>
<ul>
<li>NDK r21 和 Android 10（API 级别 29）以上</li>
<li>HWASan 仅适用于 64 位 Arm 设备</li>
<li>HWASan 应用需要将预构建的映像刷写到支持的 Pixel 手机上。</li>
</ul>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>如需使用 <a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address Sanitizer</a> 构建应用的原生 (JNI) 代码，请执行以下操作：</p>
<p>Quote from: <a href="https://developer.android.com/ndk/guides/asan#building">https://developer.android.com/ndk/guides/asan#building</a></p>
<blockquote>
<p>1.在模块的 <code>build.gradle</code> 中：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line"> defaultConfig &#123;</span><br><span class="line">     externalNativeBuild &#123;</span><br><span class="line">         cmake &#123;</span><br><span class="line">             # Can also use system or none as ANDROID_STL.</span><br><span class="line">             arguments <span class="string">&quot;-DANDROID_ARM_MODE=arm&quot;</span>, <span class="string">&quot;-DANDROID_STL=c++_shared&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.对于 <code>CMakeLists.txt</code> 中的每个目标：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_compile_options</span>(<span class="variable">$&#123;TARGET&#125;</span> PUBLIC -fsanitize=address -fno-omit-frame-pointer)</span><br><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;TARGET&#125;</span> PROPERTIES LINK_FLAGS -fsanitize=address)</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>还可以添加开关，只在debug版本中开启该功能：</p>
<p>在模块的 <code>build.gradle</code> 中:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cmake &#123;</span><br><span class="line">    arguments <span class="string">&quot;-DANDROID_STL=c++_shared&quot;</span>, <span class="string">&quot;-DSANITIZE=TRUE&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在模块的 <code>CMakeLists.txt</code> 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Enable address sanitizer only for debug builds</span><br><span class="line">if (SANITIZE)</span><br><span class="line">	...</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>还可以使用如下配置:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> (CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer&quot;</span>)</span><br><span class="line"><span class="keyword">SET</span> (CMAKE_C_FLAGS <span class="string">&quot;$&#123;CMAKE_C_FLAGS&#125; -fsanitize=address -fno-omit-frame-pointer&quot;</span>)</span><br><span class="line"><span class="keyword">SET</span> (CMAKE_SHARED_LINKER_FLAGS <span class="string">&quot;$&#123;CMAKE_SHARED_LINKER_FLAGS&#125; -fsanitize=address&quot;</span>)</span><br><span class="line"><span class="keyword">SET</span> (CMAKE_ANDROID_ARM_MODE ARM)</span><br></pre></td></tr></table></figure>

<h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><p>ASan需要在进程启动时启用，要求以全新的进程来运行应用，而不是从 zygote 克隆。从 Android O MR1（API 级别 27）开始，可替换应用进程的<a href="https://developer.android.com/ndk/guides/wrap-script">封装 Shell 脚本</a>。这样可调试的应用就可对其应用启动过程进行自定义，以便在生产设备上使用 ASan。</p>
<p>Quote from: <a href="https://developer.android.com/ndk/guides/asan#running">https://developer.android.com/ndk/guides/asan#running</a></p>
<blockquote>
<ol>
<li><p>将 <code>android:debuggable</code> 和 <code>android:extractNativeLibs=true</code> 添加到应用清单。请注意，后者是某些配置的默认设置。如需了解详情，请参阅<a href="https://developer.android.com/ndk/guides/wrap-script">封装 Shell 脚本</a>。</p>
</li>
<li><p>将 ASan 运行时库添加到应用模块的 <code>jniLibs</code> 中。</p>
</li>
<li><p>将包含以下内容的 <code>wrap.sh</code> 文件添加到每个相同的目录中。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/system/bin/sh</span></span><br><span class="line">HERE=<span class="string">&quot;<span class="subst">$(cd <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span> &amp;&amp; pwd)</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> ASAN_OPTIONS=log_to_syslog=<span class="literal">false</span>,allow_user_segv_handler=1</span><br><span class="line">ASAN_LIB=$(<span class="built_in">ls</span> <span class="variable">$HERE</span>/libclang_rt.asan-*-android.so)</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$HERE</span>/libc++_shared.so&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Workaround for https://github.com/android-ndk/ndk/issues/988.</span></span><br><span class="line">    <span class="built_in">export</span> LD_PRELOAD=<span class="string">&quot;<span class="variable">$ASAN_LIB</span> <span class="variable">$HERE</span>/libc++_shared.so&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">export</span> LD_PRELOAD=<span class="string">&quot;<span class="variable">$ASAN_LIB</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>目前发现， <code>android:debuggable</code> 默认是 <code>&quot;false&quot;</code>，即使不设置为 <code>&quot;true&quot;</code>，也不影响结果。</p>
<p>如果没有在 <code>AndroidManifest.xml</code>配置， <code>android:extractNativeLibs</code>默认值是 <code>&quot;true&quot;</code>。</p>
<p><em><strong>注意：</strong></em>如果使用app bundle, Android Gradle 插件从<a href="https://developer.android.com/studio/releases/gradle-plugin#3-6-0">3.6.0</a> 默认会将 <code>extractNativeLibs</code> 设置为 <code>&quot;false&quot;</code>。也就是说，原生库将保持页面对齐状态并以未压缩的形式打包。</p>
<h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>除了手动拷贝，还可以使用下面的两种方法：</p>
<p>(1)在<code>CMakeLists.txt</code>中添加如下配置, 自动拷贝<code>*.asan*$&#123;ARCH&#125;*-android.so</code>, 需要设置库的名称<em>LibraryName</em>:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(LIBNAME <span class="string">&quot;LibraryName&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A function to retrieve the architecture from the ABI</span></span><br><span class="line"><span class="comment"># (neither ANDROID_ARCH_NAME nor CMAKE_SYSTEM_PROCESSOR work for this)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>(get_architecture ABI ARCH)</span><br><span class="line">    <span class="keyword">if</span> (ABI <span class="keyword">STREQUAL</span> armeabi-v7a)</span><br><span class="line">        <span class="keyword">set</span>(<span class="variable">$&#123;ARCH&#125;</span> arm PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">elseif</span>(ABI <span class="keyword">STREQUAL</span> arm64-v8a)</span><br><span class="line">        <span class="keyword">set</span>(<span class="variable">$&#123;ARCH&#125;</span> aarch64 PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">elseif</span>(ABI <span class="keyword">STREQUAL</span> x86)</span><br><span class="line">        <span class="keyword">set</span>(<span class="variable">$&#123;ARCH&#125;</span> i686 PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">elseif</span>(ABI <span class="keyword">STREQUAL</span> x86_64)</span><br><span class="line">        <span class="keyword">set</span>(<span class="variable">$&#123;ARCH&#125;</span> x86_64 PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line">        <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;Unsupported ABI&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Asan libs are &quot;somewhere&quot; in the toolchain&#x27;s root, we try to find the</span></span><br><span class="line"><span class="comment"># right one for the current architecture and copy it to the libs output dir</span></span><br><span class="line"><span class="comment"># (so that it will be packed in the apk):</span></span><br><span class="line"></span><br><span class="line">get_architecture(<span class="variable">$&#123;ANDROID_ABI&#125;</span> ARCH)</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE ASAN_SRC <span class="variable">$&#123;ANDROID_TOOLCHAIN_ROOT&#125;</span>/*.asan*<span class="variable">$&#123;ARCH&#125;</span>*-android.so)</span><br><span class="line"><span class="keyword">set</span>(ASAN_DEST <span class="variable">$&#123;CMAKE_LIBRARY_OUTPUT_DIRECTORY&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_command</span>(</span><br><span class="line">        <span class="keyword">TARGET</span> <span class="variable">$&#123;LIBNAME&#125;</span> PRE_BUILD</span><br><span class="line">        <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy <span class="variable">$&#123;ASAN_SRC&#125;</span> <span class="variable">$&#123;ASAN_DEST&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>(2)使用<code>asan_device_setup</code>，将<code>*.asan*$&#123;ARCH&#125;*-android.so</code>添加到设备，设备需要root。</p>
<p>Mac 系统下，其路径为<code>ANDROID_NDK_HOME/toolchains/llvm/prebuilt/darwin-x86_64/lib64/clang/9.0.9/bin</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ ./asan_device_setup --<span class="built_in">help</span>                                                                                     </span><br><span class="line">usage: ./asan_device_setup [--revert] [--device device-id] [--lib path] [--extra-options options]</span><br><span class="line">  --revert: Uninstall ASan from the device.</span><br><span class="line">  --lib: Path to ASan runtime library.</span><br><span class="line">  --extra-options: Extra ASAN_OPTIONS.</span><br><span class="line">  --device: Install to the given device. Use <span class="string">&#x27;adb devices&#x27;</span> to find</span><br><span class="line">            device-id.</span><br><span class="line">  --use-su: Use <span class="string">&#x27;su -c&#x27;</span> prefix <span class="keyword">for</span> every adb <span class="built_in">command</span> instead of using</span><br><span class="line">            <span class="string">&#x27;adb root&#x27;</span> once.</span><br></pre></td></tr></table></figure>

<p>如果执行成功，那么设备就会自动重启，测试完成最好移除这些库。</p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>NDK包含一个推荐的针对ASan的<a href="https://android.googlesource.com/platform/ndk/+/refs/heads/master/wrap.sh/asan.sh">wrap.sh文件</a>。</p>
<p>Mac 系统下，其路径为<code>ANDROID_NDK_HOME/wrap.sh/asan.sh</code></p>
<p>将<code>asan.sh</code>重命名为<code>wrap.sh</code>，在模块的跟目录下添加  <code>wrap</code>, 目录结构应包含以下内容 :</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&lt;project root&gt;</span><br><span class="line">└── app</span><br><span class="line">    ├── src</span><br><span class="line">    │   ├── main</span><br><span class="line">    │   │   ├── AndroidManifest.xml</span><br><span class="line">    │   │   ├── java</span><br><span class="line">    │   │   ├── cpp</span><br><span class="line">    │   │   └── res</span><br><span class="line">    │   ├── androidTest</span><br><span class="line">    │   └── test</span><br><span class="line">    └── wrap</span><br><span class="line">        └── lib</span><br><span class="line">            ├── arm64-v8a</span><br><span class="line">            │   └── wrap.sh</span><br><span class="line">            ├── armeabi-v7a</span><br><span class="line">            │   └── wrap.sh</span><br><span class="line">            ├── x86</span><br><span class="line">            │   └── wrap.sh</span><br><span class="line">            └── x86_64</span><br><span class="line">                └── wrap.sh</span><br></pre></td></tr></table></figure>

<p>在模块的 <code>build.gradle</code> 中添加:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            sourceSets.debug.resources.srcDir <span class="string">&quot;wrap&quot;</span></span><br><span class="line">            externalNativeBuild &#123;</span><br><span class="line">                cmake &#123;</span><br><span class="line">                    arguments <span class="string">&quot;-DANDROID_STL=c++_shared&quot;</span>, <span class="string">&quot;-DSANITIZE=TRUE&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h2><h3 id="heap-use-after-free-error"><a href="#heap-use-after-free-error" class="headerlink" title="heap-use-after-free error"></a>heap-use-after-free error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doHeapUseAfterFree) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-heap-use-after-free?view=msvc-160</span></span><br><span class="line">    <span class="comment">// heap-use-after-free error</span></span><br><span class="line">    <span class="type">char</span> * <span class="keyword">volatile</span> p = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">delete</span>[] p;</span><br><span class="line"></span><br><span class="line">    p[<span class="number">5</span>] = <span class="number">42</span>; <span class="comment">// Boom!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="heap-buffer-overflow-error"><a href="#heap-buffer-overflow-error" class="headerlink" title="heap-buffer-overflow error"></a>heap-buffer-overflow error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doHeapBufferOverflow) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-heap-buffer-overflow?view=msvc-160</span></span><br><span class="line">    <span class="comment">// heap-buffer-overflow error</span></span><br><span class="line">    <span class="type">char</span> *x = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = x[<span class="number">10</span>];  <span class="comment">// Boom!</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOGE</span>(<span class="string">&quot;res: %d&quot;</span>,res);</span><br><span class="line">    <span class="built_in">free</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stack-buffer-overflow-error"><a href="#stack-buffer-overflow-error" class="headerlink" title="stack-buffer-overflow error"></a>stack-buffer-overflow error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doStackBufferOverflow) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-stack-buffer-overflow?view=msvc-160</span></span><br><span class="line">    <span class="comment">// stack-buffer-overflow error</span></span><br><span class="line">    <span class="type">char</span> x[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">int</span> res = x[<span class="number">10</span>];  <span class="comment">// Boom! Classic stack buffer overflow</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">LOGE</span>(<span class="string">&quot;res: %d&quot;</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stack-buffer-underflow-error"><a href="#stack-buffer-underflow-error" class="headerlink" title="stack-buffer-underflow error"></a>stack-buffer-underflow error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doStackBufferUnderflow) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-stack-buffer-underflow?view=msvc-160</span></span><br><span class="line">    <span class="comment">// stack-buffer-underflow error</span></span><br><span class="line">    <span class="type">int</span> subscript = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">42</span>];</span><br><span class="line">    buffer[subscript] = <span class="number">42</span>; <span class="comment">// Boom!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stack-use-after-return-error"><a href="#stack-use-after-return-error" class="headerlink" title="stack-use-after-return error"></a>stack-use-after-return error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* x;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> stack_buffer[<span class="number">42</span>];</span><br><span class="line">    x = &amp;stack_buffer[<span class="number">13</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doStackUseAfterReturn) &#123;</span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-stack-use-after-return?view=msvc-160</span></span><br><span class="line">    <span class="comment">// stack-use-after-return error</span></span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line">    *x = <span class="number">42</span>; <span class="comment">// Boom!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This check requires code generation that&#x27;s activated by an extra compiler option,</span></span><br><span class="line">    <span class="comment">// fsanitize-address-use-after-return, and by setting the environment variable</span></span><br><span class="line">    <span class="comment">// ASAN_OPTIONS=detect_stack_use_after_return=1.</span></span><br><span class="line">    <span class="built_in">LOGE</span>(<span class="string">&quot;This should set the environment variable ASAN_OPTIONS=detect_stack_use_after_return=1.&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="double-free-error"><a href="#double-free-error" class="headerlink" title="double-free error"></a>double-free error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doDoubleFree) &#123;</span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-double-free?view=msvc-160</span></span><br><span class="line">    <span class="comment">// double-free error</span></span><br><span class="line">    <span class="type">char</span> * <span class="keyword">volatile</span> p = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">delete</span>[] p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] p;  <span class="comment">// Boom!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="null-pointer-dereference-error"><a href="#null-pointer-dereference-error" class="headerlink" title="null-pointer dereference error"></a>null-pointer dereference error</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doNullpointerDereference) &#123;</span><br><span class="line">    <span class="comment">//null-pointer dereference error</span></span><br><span class="line">    <span class="type">char</span> * <span class="keyword">volatile</span> p = (<span class="type">char</span> *)<span class="literal">nullptr</span>;</span><br><span class="line">    p[<span class="number">42</span>] = <span class="number">1</span>;  <span class="comment">// Boom!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="memcpy-param-overlap"><a href="#memcpy-param-overlap" class="headerlink" title="memcpy-param-overlap"></a>memcpy-param-overlap</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doMemcpyParamOverlap) &#123;</span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-memcpy-param-overlap?view=msvc-160</span></span><br><span class="line">    <span class="comment">// memcpy-param-overlap</span></span><br><span class="line">    <span class="comment">// The function memcpy doesn&#x27;t support overlapping memory.</span></span><br><span class="line">    <span class="comment">// It provides an alternative to memcpy that does support overlapping memory: memmove.</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(buffer, buffer + <span class="number">1</span>, <span class="number">5</span>); <span class="comment">// BOOM!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="strncat-param-overlap"><a href="#strncat-param-overlap" class="headerlink" title="strncat-param-overlap"></a>strncat-param-overlap</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IMPL_FUNC</span>(<span class="type">void</span>,doStrncatParamOverlap) &#123;</span><br><span class="line">    <span class="comment">// https://docs.microsoft.com/en-us/cpp/sanitizers/error-strncat-param-overlap?view=msvc-160</span></span><br><span class="line">    <span class="comment">// strncat-param-overlap</span></span><br><span class="line">    <span class="comment">// Code that moves memory in overlapping buffer can cause hard-to-diagnose errors.</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[] = <span class="string">&quot;hello\0XXX&quot;</span>;</span><br><span class="line">    <span class="built_in">strncat</span>(buffer, buffer + <span class="number">1</span>, <span class="number">3</span>); <span class="comment">// BOOM</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p><a href="https://github.com/rolyyu/AndroidASan">https://github.com/rolyyu/AndroidASan</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.android.com/ndk/guides/asan">https://developer.android.com/ndk/guides/asan</a></p>
<p><a href="https://developer.android.com/ndk/guides/wrap-script">https://developer.android.com/ndk/guides/wrap-script</a></p>
<p><a href="https://github.com/google/sanitizers">https://github.com/google/sanitizers</a></p>
<p><a href="https://stackoverflow.com/questions/41552966/getting-new-delete-type-mismatch-from-asan">https://stackoverflow.com/questions/41552966/getting-new-delete-type-mismatch-from-asan</a></p>
<p><a href="https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples?view=msvc-160">https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples?view=msvc-160</a></p>
<p><a href="https://docs.microsoft.com/en-us/cpp/sanitizers/error-new-delete-type-mismatch?view=msvc-160">https://docs.microsoft.com/en-us/cpp/sanitizers/error-new-delete-type-mismatch?view=msvc-160</a></p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>NDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Android消息机制</title>
    <url>/2016/08/27/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>​	消息驱动模式是android提供的用来更新UI的一套机制，即消息处理的机制，类似于Windows的消息机制，所有的外部来的按键消息、触屏消息、各种系统Intent、广播等都转化为内部消息，然后在主线程中分发处理。在Windows的消息处理模型中，存在一个系统消息队列，这个队列是整个进程的核心，几乎所有的动作都要转化成消息，然后放在队列中，消息的处理只能在主线程中完成。Android的消息处理则不太一样。Android没有全局的消息队列，消息队列是和某个线程关联在一起的。每个线程最多有一个消息队列，消息的取出和处理在线程中完成。</p>
<span id="more"></span> 

<h3 id="为什么要是用消息机制"><a href="#为什么要是用消息机制" class="headerlink" title="为什么要是用消息机制"></a>为什么要是用消息机制</h3><p>​	Android在一个程序启动后会创建一个主线程，也叫<em><strong>UI线程（非线程安全）</strong></em>这个线程主要负责监听屏幕点击事件与界面绘制，不可以直接在子线程修改UI。之所以设计成单线程模型的UI主线程，是因为多个线程访问UI可能会导致冲突，造成界面显示错乱，例如，子线程A和子线程B同时修改一个组件的尺寸和背景等资源的情况,如果非要用多线程同步加锁机制更新UI又会导致性能下降。Android在设计的时候，提供了一种异步回调机制，在子线程中用Handler通知UI线程显示、更新UI。同时，Android系统也会将大部分耗时的任务（<em>网络访问</em>，<em>访问数据库</em>）交给子线程处理，当子线程完成任务将通过Handler将结果回传给UI线程，显示任务的结果。这种机制同时避免的***<a href="http://baike.baidu.com/link?url=aHush5JzReN-AIIuYstXNJ53HHkAtOIwZ2qGxiTrKQLquLdcQOPfjq8kBLlsTusJlpLwxkI6u4vuxP0fZZgvXK">ANR（Application Not Responding）</a>***，即应用无响应。</p>
<h3 id="消息机制涉及的类"><a href="#消息机制涉及的类" class="headerlink" title="消息机制涉及的类"></a>消息机制涉及的类</h3><blockquote>
<p><em><strong>Looper</strong></em> : 消息循环，<em>Looper</em>内部有一个消息队列<em>MessageQueue</em>，默认情况下一个线程不包含一个消息循环，需要自己去创建，调用**Looper.prepare()<strong>创建一个消息循环，调用</strong>Looper.Looper()*<em>执行这个循环，Android启动时，为</em>主线程(UI线程)<em>创建了一个</em>Looper*对象。</p>
</blockquote>
<hr>
<blockquote>
<p><em><strong>Message</strong></em> ：消息，定义一个包含描述和任意数据对象的消息发送给一个<em>Handler</em>，包含两个<strong>int</strong>数据区域和一个对象数据区域。消息的创建最好用<strong>Message.obtain()<strong>或</strong>Handler.obtainMessage()</strong> 方法，从一个消息池中回收。</p>
</blockquote>
<hr>
<blockquote>
<p><em><strong>MessageQueue</strong></em> ：消息队列，持有一个<strong>Looper</strong>分发的消息列表，<strong>Message</strong>不是直接添加到消息队列里的，是添加到<strong>Handler</strong>对象绑定的<strong>Looper</strong>的对象中。</p>
</blockquote>
<hr>
<blockquote>
<p><em><strong>Handler</strong></em> : 发送和处理消息（<em>Message</em>和<em>Runnable</em>对象），与一个线程的<em>MessageQueue</em>关联。一个<em>Handler</em>实例与一个线程（包括线程的消息队列）绑定。当一个<em>Handler</em>实例被创建时，该实例与创建它的<em><strong>线程&#x2F;线程的消息队列</strong></em> 绑定到一起，然后向该消息队列发送<em>Message</em>和<em>Runnable</em>,并且当发送的<em>Message</em>和<em>Runnable</em>从消息队列返回时处理它们。</p>
</blockquote>
<h2 id="Looper类"><a href="#Looper类" class="headerlink" title="Looper类"></a>Looper类</h2><h3 id="主要成员和方法"><a href="#主要成员和方法" class="headerlink" title="主要成员和方法"></a>主要成员和方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Looper</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Looper&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Looper sMainLooper;  </span><br><span class="line">    <span class="keyword">final</span> MessageQueue mQueue;</span><br><span class="line">    <span class="keyword">final</span> Thread mThread;</span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepareMainLooper</span><span class="params">()</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title function_">getMainLooper</span><span class="params">()</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="prepare"><a href="#prepare" class="headerlink" title="prepare()"></a>prepare()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	每一个线程只能有一个<strong>Looper</strong>类的实例对象，Looper类的实例必须通过<strong>prepare()<strong>方法来创建。</strong>prepare()<strong>方法会创建一个</strong>Looper</strong>对象，并把它保存在静态变量<strong>mTreadLocal</strong>中，一个线程多次调用**prepare()**会抛出异常。</p>
<h3 id="静态变量sThreadLocal"><a href="#静态变量sThreadLocal" class="headerlink" title="静态变量sThreadLocal"></a>静态变量sThreadLocal</h3><p>​	该变量是一个<a href="http://blog.csdn.net/lufeng20/article/details/24314381">ThreadLocal</a>类型，即线程本地存储区（TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。它通过将需要保存的对象和线程id关联在一起的方式实现了线程本地存储功能，作用就是将Looper类线程隔离，保证每个线程只能有一个Looper对象。</p>
<p><strong>ThreadLocal.set(T value):</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">	<span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread(); <span class="comment">//获取当前线程</span></span><br><span class="line"><span class="type">Values</span> <span class="variable">values</span> <span class="operator">=</span> values(currentThread); <span class="comment">//查找当前线程的本地储存区</span></span><br><span class="line"><span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">	<span class="comment">//当线程本地存储区，尚未存储该线程相关信息时，则创建Values对象</span></span><br><span class="line"> values = initializeValues(currentThread);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存数据value到当前线程this</span></span><br><span class="line">values.put(<span class="built_in">this</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ThreadLocal.get():</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread(); <span class="comment">//获取当前线程</span></span><br><span class="line">   <span class="type">Values</span> <span class="variable">values</span> <span class="operator">=</span> values(currentThread); <span class="comment">//查找当前线程的本地储存区</span></span><br><span class="line">   <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">       Object[] table = values.table;</span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash &amp; values.mask;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.reference == table[index]) &#123;</span><br><span class="line">           <span class="keyword">return</span> (T) table[index + <span class="number">1</span>]; <span class="comment">//返回当前线程储存区中的数据</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//创建Values对象</span></span><br><span class="line">       values = initializeValues(currentThread);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (T) values.getAfterMiss(<span class="built_in">this</span>); <span class="comment">//从目标线程存储区没有查询是则返回null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="loop"><a href="#loop" class="headerlink" title="loop()"></a>loop()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();<span class="comment">//获取本地存储区的Looper对象</span></span><br><span class="line">		……</span><br><span class="line">    <span class="keyword">final</span> <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> me.mQueue;<span class="comment">//消息队列</span></span><br><span class="line">		……</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> queue.next(); <span class="comment">// might block，这里可能阻塞</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//没有消息退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        ……</span><br><span class="line">        msg.target.dispatchMessage(msg);<span class="comment">//消息分发</span></span><br><span class="line">				……</span><br><span class="line">        msg.recycleUnchecked();<span class="comment">//消息回收</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	<strong>loop()<strong>是一个静态方法，其中有一个无限的</strong>for</strong>循环，<strong>loop()<strong>方法会循环从消息队列</strong>MessageQueue</strong>中取出消息，然后分发出去。消息的分发是通过<strong>Message</strong>中的<strong>target</strong>变量完成的，这个变量是<strong>Handler</strong>类型的，一个<strong>Looper</strong>对象可以对应多个<strong>Handler</strong>对象。</p>
<h2 id="Message类"><a href="#Message类" class="headerlink" title="Message类"></a>Message类</h2><p>​	<strong>Message</strong>是消息的载体。<strong>Message</strong>设计成了<strong>Parelable</strong>类的派生类，表明<strong>Message</strong>可以通过<strong>binder</strong>来跨进程发送。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> </span><br></pre></td></tr></table></figure>

<h3 id="消息的类型"><a href="#消息的类型" class="headerlink" title="消息的类型"></a>消息的类型</h3><table>
<thead>
<tr>
<th>成员</th>
<th>类型</th>
<th>注解</th>
</tr>
</thead>
<tbody><tr>
<td>what</td>
<td>int</td>
<td>消息类别</td>
</tr>
<tr>
<td>when</td>
<td>long</td>
<td>消息触发时间</td>
</tr>
<tr>
<td>arg1</td>
<td>int</td>
<td>参数1</td>
</tr>
<tr>
<td>arg2</td>
<td>int</td>
<td>参数2</td>
</tr>
<tr>
<td>obj</td>
<td>Object</td>
<td>消息内容</td>
</tr>
<tr>
<td>target</td>
<td>Handler</td>
<td>消息相应的地方</td>
</tr>
<tr>
<td>callback</td>
<td>Runnable</td>
<td>回调方法</td>
</tr>
</tbody></table>
<h3 id="obtain"><a href="#obtain" class="headerlink" title="obtain()"></a>obtain()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title function_">obtain</span><span class="params">()</span> &#123;<span class="comment">//从消息池中返回一个新的Message实例，避免申请太多的Message</span></span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;<span class="comment">//消息池中有从消息池中取出</span></span><br><span class="line">        <span class="keyword">if</span> (sPool != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> sPool;</span><br><span class="line">            sPool = m.next;</span><br><span class="line">            m.next = <span class="literal">null</span>;</span><br><span class="line">            m.flags = <span class="number">0</span>; <span class="comment">// clear in-use flag</span></span><br><span class="line">            sPoolSize--;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="recycle"><a href="#recycle" class="headerlink" title="recycle()"></a>recycle()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recycle</span><span class="params">()</span> &#123;<span class="comment">//回收消息</span></span><br><span class="line">    <span class="keyword">if</span> (isInUse()) &#123; <span class="comment">//判断消息是否正在使用</span></span><br><span class="line">        <span class="keyword">if</span> (gCheckRecycle) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;This message cannot be recycled because it is still in use.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    recycleUnchecked();<span class="comment">//回收没有使用的消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MessageQueue类"><a href="#MessageQueue类" class="headerlink" title="MessageQueue类"></a>MessageQueue类</h2><h3 id="消息的构造"><a href="#消息的构造" class="headerlink" title="消息的构造"></a>消息的构造</h3><blockquote>
<p><strong>MessageQueue</strong>对象的构造是调用本地方法<strong>nativeInit()<strong>完成的。</strong>nativeInit()<strong>创建了一个本地</strong>NativeMessageQueue</strong>，它本质上是一个代理类。它把<strong>Java</strong>层的调用转变为<strong>native</strong>层<strong>Looper</strong>类的函数调用，<strong>native</strong>层的<strong>Looper</strong>实现了一整套完整的消息处理机制。但是<strong>Java</strong>层的<strong>Looper</strong>类和<strong>native</strong>层的<strong>Looper</strong>类并没有直接的关系。<strong>MessageQueue</strong>虽然使用了<strong>Native</strong>层的<strong>Looper</strong>类，但只用到了<strong>等待&#x2F;唤醒机制</strong>，其余的如消息队列的实现还是在<strong>Java</strong>层。</p>
</blockquote>
<h3 id="消息的处理"><a href="#消息的处理" class="headerlink" title="消息的处理"></a>消息的处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ptr</span> <span class="operator">=</span> mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pendingIdleHandlerCount</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">nextPollTimeoutMillis</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">            Binder.flushPendingCommands();</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//调用本地方法等待nextPollTimeoutMillis秒，-1表示永远阻塞</span></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">		<span class="comment">//针对this对象同步，只要next方法没退出，再调用本对象的任何方法都将导致调用线程挂起</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">            <span class="type">Message</span> <span class="variable">prevMsg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mMessages;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="literal">null</span> &amp;&amp; msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Stalled by a barrier.  忽略普通消息，查找下一条异步消息</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="literal">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.<span class="keyword">when</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果还没有处理这条消息的时间，计算等待时间</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="type">int</span>) Math.min(msg.<span class="keyword">when</span> - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Got a message.</span></span><br><span class="line">                    mBlocked = <span class="literal">false</span>;  <span class="comment">//取消阻塞的标志</span></span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="literal">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;Returning message: &quot;</span> + msg);</span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// No more messages.</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果退出标志设置了，销毁native对象 </span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          	<span class="comment">//检查是否安装了idle handler</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (mMessages == <span class="literal">null</span> || now &lt; mMessages.<span class="keyword">when</span>)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                mBlocked = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="literal">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> <span class="title class_">IdleHandler</span>[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Run the idle handlers.</span></span><br><span class="line">        <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">IdleHandler</span> <span class="variable">idler</span> <span class="operator">=</span> mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="literal">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">keep</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">&quot;IdleHandler threw exception&quot;</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">      	<span class="comment">//如果又idle handler ，循环继续，而不是阻塞</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="向MessageQueue发消息"><a href="#向MessageQueue发消息" class="headerlink" title="向MessageQueue发消息"></a>向MessageQueue发消息</h3><p>使用的是**enqueueMessage()**方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> <span class="keyword">when</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="literal">null</span>) &#123;<span class="comment">//如果消息的target为NULL，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Message must have a target.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;<span class="comment">//如果加入的是正在处理的消息对象，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg + <span class="string">&quot; This message is already in use.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;<span class="comment">//用this对象同步</span></span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">            <span class="type">IllegalStateException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                    msg.target + <span class="string">&quot; sending message to a Handler on a dead thread&quot;</span>);</span><br><span class="line">            Log.w(TAG, e.getMessage(), e);</span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.<span class="keyword">when</span> = <span class="keyword">when</span>;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;<span class="comment">//p指向消息队列头</span></span><br><span class="line">        <span class="type">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span> || <span class="keyword">when</span> == <span class="number">0</span> || <span class="keyword">when</span> &lt; p.<span class="keyword">when</span>) &#123;</span><br><span class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg; <span class="comment">//把消息插到队列头</span></span><br><span class="line">            needWake = mBlocked;<span class="comment">//这时如果处理线程阻塞了，则需要唤醒</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="comment">//如果设置了“SyncBarrier”，只有插入了“异步消息”才需要唤醒</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="literal">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="literal">null</span> || <span class="keyword">when</span> &lt; p.<span class="keyword">when</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              	<span class="comment">//如果已经一条“异步消息”在队列里了，而且在本条消息前处理，而不需要唤醒</span></span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;<span class="comment">//如果需要唤醒，则唤醒线程</span></span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	<strong>enqueueMessage()<strong>方法插入消息时根据时间来排序，时间早的插在前面。消息队列的组织利用了</strong>Message</strong>类里面的<strong>next</strong>指针形成一个从头指向尾的单向链表。插入时计算是否需要唤醒处理。**enqueueMessage()**方法会尽量避免唤醒处理线程，只有插入了一条马上要处理的消息，或者在暂停处理消息的情况下，有插入了“异步消息”的情况下才会去唤醒处理线程。其余的情况都是把消息放到队列的中部或尾部（时间未到）。如果前面还有消息没处理，这条消息就更不急于处理了。</p>
<h2 id="Hander类"><a href="#Hander类" class="headerlink" title="Hander类"></a>Hander类</h2><h3 id="构造Handler"><a href="#构造Handler" class="headerlink" title="构造Handler"></a>构造Handler</h3><p>构造一个<strong>Handler</strong>对象需要两个参数，线程的<strong>Looper</strong>对象和消息的处理函数。<strong>Looper</strong>是必须的，构造方法不指定则使用当前线程的<strong>Looper</strong>对象。但是<strong>callback</strong>不是必须的，可以用<strong>callback</strong>实现对消息的集中处理，也可以把处理消息的<strong>callback</strong>方法放在消息对象中。</p>
<h4 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Callback callback, <span class="type">boolean</span> async)</span> &#123;</span><br><span class="line">    <span class="comment">//匿名类、内部类或本地类都必须申明为static，否则会警告可能出现内存泄露</span></span><br><span class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Handler</span>&gt; klass = getClass();</span><br><span class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;The following Handler class should be static or leaks might occur: &quot;</span> +</span><br><span class="line">                klass.getCanonicalName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mLooper = Looper.myLooper(); <span class="comment">//从sThreadLocal中获取Looper对象,下面Looper中的函数可以看到</span></span><br><span class="line">    <span class="keyword">if</span> (mLooper == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mQueue = mLooper.mQueue; <span class="comment">//消息队列，来自Looper对象</span></span><br><span class="line">    mCallback = callback;  <span class="comment">//回调方法</span></span><br><span class="line">    mAsynchronous = async; <span class="comment">//设置消息是否为异步处理方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Looper类中的方法，见2.3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> Looper <span class="title function_">myLooper</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Looper looper)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(looper, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Looper looper, Callback callback, <span class="type">boolean</span> async)</span> &#123;</span><br><span class="line">    mLooper = looper;</span><br><span class="line">    mQueue = looper.mQueue;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mAsynchronous = async;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="send方法"><a href="#send方法" class="headerlink" title="send方法"></a>send方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(Message msg)</span>&#123;	<span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);	&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendEmptyMessage</span><span class="params">(<span class="type">int</span> what)</span>&#123;  <span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);	&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendEmptyMessageDelayed</span><span class="params">(<span class="type">int</span> what, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">        msg.what = what;</span><br><span class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendEmptyMessageAtTime</span><span class="params">(<span class="type">int</span> what, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">        msg.what = what;</span><br><span class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessageDelayed</span><span class="params">(Message msg, <span class="type">long</span> delayMillis)</span>&#123;</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtFrontOfQueue</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">       	……</span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有的<strong>send</strong>消息都调用了<strong>enqueueMessage()<strong>方法,最终调用了</strong>MessageQueue</strong>中的<strong>enqueueMessage()<strong>方法，就是把消息加入到了消息队列，并指定执行的时间。可以看到下面</strong>queue.enqueueMessage()<strong>方法中除了</strong>msg</strong>，只有<strong>时间</strong>。上述一系列的<strong>send</strong>方法只是为了方便使用，可以从方法名中看出各自的使用情景。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line"> 	msg.target = <span class="built_in">this</span>;</span><br><span class="line"> 	<span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">     	msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">post</span><span class="params">(Runnable r)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">postAtTime</span><span class="params">(Runnable r, <span class="type">long</span> uptimeMillis)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r), uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">postAtTime</span><span class="params">(Runnable r, Object token, <span class="type">long</span> uptimeMillis)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtTime(getPostMessage(r, token), uptimeMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">postDelayed</span><span class="params">(Runnable r, <span class="type">long</span> delayMillis)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageDelayed(getPostMessage(r), delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">postAtFrontOfQueue</span><span class="params">(Runnable r)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sendMessageAtFrontOfQueue(getPostMessage(r));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码上看这些<strong>post</strong>方法的实现也是用<strong>send</strong>，只是多了<strong>Runnable</strong>对象，然后调用<strong>getPostMessage()<strong>方法获取一个</strong>Message</strong>对象来发送。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title function_">getPostMessage</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">	<span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line"> 	m.callback = r;<span class="comment">//这里callback被携带在message中，参见3.1</span></span><br><span class="line"> 	<span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title function_">getPostMessage</span><span class="params">(Runnable r, Object token)</span> &#123;</span><br><span class="line"> 	<span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line"> 	m.obj = token;</span><br><span class="line"> 	m.callback = r;</span><br><span class="line"> 	<span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dispatchMessage-方法"><a href="#dispatchMessage-方法" class="headerlink" title="dispatchMessage()方法"></a>dispatchMessage()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);<span class="comment">//message中的callback</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;<span class="comment">//Handler构造时，指定的callback </span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);<span class="comment">//Handler默认方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面可以看到消息分发的优先级：</p>
<ol>
<li>Message的回调方法：message.callback；</li>
<li>Handler的回调方法：Handler.mCallback.handleMessage(msg)；</li>
<li>Handler的默认方法：Handler.handleMessage(msg)。</li>
</ol>
<p><strong>dispatchMessage()方法的调用在Looper类中的loop()方法</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;<span class="comment">//见2.4</span></span><br><span class="line"> <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">     ……</span><br><span class="line">     msg.target.dispatchMessage(msg);<span class="comment">//消息分发</span></span><br><span class="line">	 ……</span><br><span class="line">     msg.recycleUnchecked();<span class="comment">//消息回收</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>  <img src="/2016/08/27/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6.png" alt="Android消息机制"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="http://gityuan.com/2015/12/26/handler-message-framework/">http://gityuan.com/2015/12/26/handler-message-framework/</a></p>
<p>[2] <a href="http://yuqiangqiang.com/2014/11/08/android%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/9-android%E4%B8%8B%E7%9A%84Handler%E6%9C%BA%E5%88%B6/">http://yuqiangqiang.com/2014/11/08/android基础总结/9-android下的Handler机制/</a></p>
<p>[3] <a href="http://www.kancloud.cn/digest/androidfrom-0/144443">http://www.kancloud.cn/digest/androidfrom-0/144443</a></p>
<p>[4] <a href="https://developer.android.com/training/multiple-threads/communicate-ui.html">https://developer.android.com/training/multiple-threads/communicate-ui.html</a></p>
<p>[5] <a href="https://blog.nikitaog.me/2014/10/11/android-looper-handler-handlerthread-i/">https://blog.nikitaog.me/2014/10/11/android-looper-handler-handlerthread-i/</a></p>
<p>[6] <a href="http://www.cnblogs.com/codingmyworld/archive/2011/09/14/2174255.html#!comments">http://www.cnblogs.com/codingmyworld/archive/2011/09/14/2174255.html#!comments</a></p>
<p>[7] <a href="http://www.jianshu.com/p/02962454adf7">http://www.jianshu.com/p/02962454adf7</a></p>
<p>[8] <a href="http://www.feeyan.cn/?p=17">http://www.feeyan.cn/?p=17</a></p>
<p>[9] <a href="http://anany.me/2015/04/12/handler/">http://anany.me/2015/04/12/handler/</a></p>
<p>[10] <a href="http://gityuan.com/2015/12/27/handler-message-native/#nativepollonce">http://gityuan.com/2015/12/27/handler-message-native/#nativepollonce</a></p>
<p>[11] <a href="https://www.zhihu.com/question/34652589">https://www.zhihu.com/question/34652589</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>BD-Rate (Bjontegaard Delta-Rate Metric)</title>
    <url>/2024/05/06/BD-Rate-Bjontegaard-Delta-Rate-Metric/</url>
    <content><![CDATA[<p>#BD-Rate (Bjontegaard Delta-Rate Metric)</p>
<p><img src="https://vicuesoft.com/glossary/rd_curve/image1.png" alt="RD curve pic_1"></p>
<p>The RD curve represents the encode performance: the higher the metric value for the lower bitrate, the better. The Bjontegaard Delta-Rate (BD Rate) metric provides a way to estimate the average difference between two RD-curves. BD Rate metric can be used to compare and choose the encoder or configuration.</p>
<span id="more"></span> 

<h2 id="Rate-Distortion-Plot"><a href="#Rate-Distortion-Plot" class="headerlink" title="Rate-Distortion Plot"></a>Rate-Distortion Plot</h2><p>Assume there are two video encoders to compare in terms of compression efficiency. Here by the term “compression efficiency” the following two measures are assumed:</p>
<ol>
<li>Bitrate (bits per second) of a compressed video sequence.</li>
<li>Video distortion introduced by lossy compression.</li>
</ol>
<p>Let us assume we have four different compression results for each of the two encoders (A and B). Marking the bitrate on the x-axis and PSNR distortion on the y-axis the rate-distortion plot can be drawn as shown in the figure below.</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1036/1*7AGpVfFUqluBHEE0x-_75g.png" alt="Rate-Distortion Compression Efficiency Points of Two Hypothetical Video Encoders."></p>
<h2 id="Rate-Distortion-Curve"><a href="#Rate-Distortion-Curve" class="headerlink" title="Rate-Distortion Curve"></a>Rate-Distortion Curve</h2><p>One way to compare the efficiency in numerical form is to fix one measurement and compare by another. Let’s say, we want to compare bit rate savings at a certain PSNR distortion level of 38 dB, but available measure points are not exactly there. We need to interpolate the rate-distortion curve to get an approximation of the bit rate at the target distortion level (see figure below).</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1036/1*umUWHBSXu0-qR93rkFzzAg.png" alt="img"></p>
<p>With the help of interpolation we now have two RD curves instead of points. By measuring the distance between the two curves at the certain distortion level the bitrate “savings” of the one encoder compared to the other one at this distortion level can be compared numerically.</p>
<h2 id="BD-Rate-Metric"><a href="#BD-Rate-Metric" class="headerlink" title="BD Rate Metric"></a>BD Rate Metric</h2><p>BD Rate Metric is a method for calculating the average difference between two rate-distortion (RD) curves. In other words, to compare two encoders (or two encoding configurations) the area between the two RD-curves must be divided by the integration interval as shown below.</p>
<p><img src="https://miro.medium.com/v2/resize:fit:1036/1*2N8luICh1iyu_XiLe0GIWQ.png" alt="img"></p>
<p>In a comparison between Encoder A and Encoder B a negative BD Rate would mean Encoder A provides better compression efficiency (lower bitrate at a similar visual quality level). A positive value would indicate inferior compression efficiency.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://vicuesoft.com/glossary/term/rd_curve/">https://vicuesoft.com/glossary/term/rd_curve/</a></p>
<p><a href="https://medium.com/innovation-labs-blog/bjontegaard-delta-rate-metric-c8c82c1bc42c">https://medium.com/innovation-labs-blog/bjontegaard-delta-rate-metric-c8c82c1bc42c</a></p>
<p><a href="https://arxiv.org/pdf/2401.04039">https://arxiv.org/pdf/2401.04039</a></p>
<p><a href="https://netflixtechblog.com/performance-comparison-of-video-coding-standards-an-adaptive-streaming-perspective-d45d0183ca95">https://netflixtechblog.com/performance-comparison-of-video-coding-standards-an-adaptive-streaming-perspective-d45d0183ca95</a></p>
<p><a href="https://streaminglearningcenter.com/encoding/compute-bd-rate-functions.html">https://streaminglearningcenter.com/encoding/compute-bd-rate-functions.html</a></p>
<p><a href="https://www.spiedigitallibrary.org/conference-proceedings-of-spie/11842/118420T/Towards-much-better-SVT-AV1-quality-cycles-tradeoffs-for-VOD/10.1117/12.2595598.full#_=">https://www.spiedigitallibrary.org/conference-proceedings-of-spie/11842/118420T/Towards-much-better-SVT-AV1-quality-cycles-tradeoffs-for-VOD/10.1117/12.2595598.full#_=</a>_</p>
]]></content>
      <tags>
        <tag>BDBR</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg Glossary: DAR, PAR, and SAR</title>
    <url>/2024/05/29/FFmpeg-Glossary-DAR-PAR-and-SAR/</url>
    <content><![CDATA[<p>The SAR and DAR output in the FFmpeg terminal are as follows</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#x27;test.mp4&#x27;:</span><br><span class="line">  Metadata:</span><br><span class="line">    major_brand     : mp42</span><br><span class="line">    minor_version   : 0</span><br><span class="line">    compatible_brands: mp42mp41</span><br><span class="line">    creation_time   : 2018-05-25T12:42:26.000000Z</span><br><span class="line">  Duration: 00:02:00.02, start: 0.000000, bitrate: 50449 kb/s</span><br><span class="line">  Stream #0:0[0x1](eng): Video: h264 (Main) (avc1 / 0x31637661), yuv420p(tv, bt709, progressive), 1920x1080, 50126 kb/s, 29.97 fps, 29.97 tbr, 30k tbn (default)</span><br></pre></td></tr></table></figure>

<p>SAR (Sample Aspect Ratio) : 单个像素的宽度和像素的高度的比 (That is the width of a pixel divided by the height of the pixel.)</p>
<p>DAR (Display Aspect Ratio) : 预期显示的宽度与高度的比 (The intended display’s width-to-height aspect)</p>
<p>PAR (Picture Aspect Ratio) : 宽度与高度像素个数的比 (‘horizontal_size’:’vertical_size’)</p>
<p><em><strong>What’s confusing:</strong></em></p>
<p><strong><a href="https://en.wikipedia.org/wiki/Aspect_ratio_(image)#storage_aspect_ratio">Storage aspect ratio</a></strong> (<strong>SAR</strong>) is the ratio of numbers of pixels. </p>
<p><strong><a href="https://en.wikipedia.org/wiki/Pixel_aspect_ratio">Pixel aspect ratio</a></strong> (<strong>PAR</strong>) is a mathematical <a href="https://en.wikipedia.org/wiki/Ratio">ratio</a> that describes how the width of a <a href="https://en.wikipedia.org/wiki/Pixel">pixel</a> in a <a href="https://en.wikipedia.org/wiki/Digital_image">digital image</a> compared to the height of that pixel.</p>
<span id="more"></span> 

<h2 id="先查看FFmpeg中的avcodec-string函数"><a href="#先查看FFmpeg中的avcodec-string函数" class="headerlink" title="先查看FFmpeg中的avcodec_string函数:"></a>先查看FFmpeg中的<a href="https://ffmpeg.org/doxygen/trunk/avcodec_8c_source.html#l00622">avcodec_string</a>函数:</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">avcodec_string</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> buf_size, AVCodecContext *enc, <span class="type">int</span> encode)</span></span><br><span class="line">&#123;</span><br><span class="line">  	 AVRational display_aspect_ratio;</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (enc-&gt;width) &#123;</span><br><span class="line">            av_bprintf(&amp;bprint, <span class="string">&quot;%s%dx%d&quot;</span>, new_line ? separator : <span class="string">&quot;, &quot;</span>,</span><br><span class="line">                       enc-&gt;width, enc-&gt;height);</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (enc-&gt;sample_aspect_ratio.num) &#123;</span><br><span class="line">                av_reduce(&amp;display_aspect_ratio.num, &amp;display_aspect_ratio.den,</span><br><span class="line">                          enc-&gt;width * (<span class="type">int64_t</span>)enc-&gt;sample_aspect_ratio.num,</span><br><span class="line">                          enc-&gt;height * (<span class="type">int64_t</span>)enc-&gt;sample_aspect_ratio.den,</span><br><span class="line">                          <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">                av_bprintf(&amp;bprint, <span class="string">&quot; [SAR %d:%d DAR %d:%d]&quot;</span>,</span><br><span class="line">                         enc-&gt;sample_aspect_ratio.num, enc-&gt;sample_aspect_ratio.den,</span><br><span class="line">                         display_aspect_ratio.num, display_aspect_ratio.den);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="PAR-对应-enc-width-enc-height"><a href="#PAR-对应-enc-width-enc-height" class="headerlink" title="PAR 对应 enc-&gt;width, enc-&gt;height:"></a>PAR 对应 <a href="https://ffmpeg.org/doxygen/trunk/structAVCodecContext.html#a0d8f46461754e8abea0847dcbc41b956">enc-&gt;width</a>, <a href="https://ffmpeg.org/doxygen/trunk/structAVCodecContext.html#a0449afd803eb107bd4dbc8b5ea22e363">enc-&gt;height</a>:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVCodecContext</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* video only */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * picture width / height.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @note Those fields may not match the values of the last</span></span><br><span class="line"><span class="comment">     * AVFrame output by avcodec_receive_frame() due frame</span></span><br><span class="line"><span class="comment">     * reordering.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - encoding: MUST be set by user.</span></span><br><span class="line"><span class="comment">     * - decoding: May be set by the user before opening the decoder if known e.g.</span></span><br><span class="line"><span class="comment">     *             from the container. Some decoders will require the dimensions</span></span><br><span class="line"><span class="comment">     *             to be set by the caller. During decoding, the decoder may</span></span><br><span class="line"><span class="comment">     *             overwrite those values as required while parsing the data.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> width, height;</span><br></pre></td></tr></table></figure>

<p><a href="https://lists.ffmpeg.org/pipermail/ffmpeg-user/2020-September/050282.html">[FFmpeg-user] Glossary: DAR, PAR, and SAR</a> 中有详细介绍, 其中关于PAR:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PAR (picture aspect ratio [1]) [noun]: 1, The metadata ratio:</span><br><span class="line">   &#x27;horizontal_size&#x27;:&#x27;vertical_size&#x27; [3], as a minimized, H:V, integer</span><br><span class="line">   ratio (e.g. 5:4, 3:2) [2][4] (also see &quot;SAR&quot;, note [2]).</span><br><span class="line">[1] It&#x27;s mistakenly asserted by some that &quot;PAR&quot; is an acronym for &quot;pixel aspect ratio&quot;.</span><br><span class="line">[2] PAR can also be calculated from DAR &amp; SAR thusly: PAR = DAR/SAR.</span><br><span class="line">[3] Note that PAR is virtual (i.e. defined by dataset indexes, not</span><br><span class="line">       physical dimensions).</span><br><span class="line">[4] H.262 doesn&#x27;t define PAR, however, it does define a quotent that correlates with PAR, to wit: H.262 §6.3.3, aspect_ratio_information:</span><br><span class="line">         &quot;SAR = DAR × horizontal_size/vertical_size&quot;.</span><br></pre></td></tr></table></figure>

<h3 id="SAR-对应-enc-sample-aspect-ratio"><a href="#SAR-对应-enc-sample-aspect-ratio" class="headerlink" title="SAR 对应 enc-&gt;sample_aspect_ratio:"></a>SAR 对应 <a href="https://ffmpeg.org/doxygen/trunk/structAVCodecContext.html#a5252d34fbce300228d4dbda19a8c3293">enc-&gt;sample_aspect_ratio</a>:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVCodecContext</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sample aspect ratio (0 if unknown)</span></span><br><span class="line"><span class="comment">     * That is the width of a pixel divided by the height of the pixel.</span></span><br><span class="line"><span class="comment">     * Numerator and denominator must be relatively prime and smaller than 256 for some video standards.</span></span><br><span class="line"><span class="comment">     * - encoding: Set by user.</span></span><br><span class="line"><span class="comment">     * - decoding: Set by libavcodec.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AVRational sample_aspect_ratio;</span><br></pre></td></tr></table></figure>

<h3 id="DAR-对应-display-aspect-ratio"><a href="#DAR-对应-display-aspect-ratio" class="headerlink" title="DAR 对应 display_aspect_ratio:"></a>DAR 对应 display_aspect_ratio:</h3><p><code>av_reduce(&amp;display_aspect_ratio.num, &amp;display_aspect_ratio.den,</code></p>
<p>​                          <code>enc-&gt;width * (int64_t)enc-&gt;sample_aspect_ratio.num,</code></p>
<p>​                          <code>enc-&gt;height * (int64_t)enc-&gt;sample_aspect_ratio.den,</code></p>
<p>​                          <code>1024 * 1024);</code></p>
<p>DAR &#x3D; SAR × PAR</p>
<h2 id="再来看-Wikipedia-中的词条-Pixel-Aspect-Ratio-PAR-和-Storage-aspect-ratio-SAR"><a href="#再来看-Wikipedia-中的词条-Pixel-Aspect-Ratio-PAR-和-Storage-aspect-ratio-SAR" class="headerlink" title="再来看 Wikipedia 中的词条 Pixel Aspect Ratio (PAR)和 Storage aspect ratio (SAR)"></a>再来看 Wikipedia 中的词条 Pixel Aspect Ratio (PAR)和 <strong>Storage aspect ratio</strong> (SAR)</h2><p>先说结论:</p>
<p>Pixel Aspect Ratio &#x3D;&#x3D; Sample Aspect Ratio</p>
<p>Storage Aspect Ratio &#x3D;&#x3D; Picture Aspect Ratio</p>
<h3 id="Pixel-aspect-ratio-PAR"><a href="#Pixel-aspect-ratio-PAR" class="headerlink" title="Pixel aspect ratio (PAR)"></a><strong><a href="https://en.wikipedia.org/wiki/Pixel_aspect_ratio">Pixel aspect ratio</a></strong> (<strong>PAR</strong>)</h3><p>是描述<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F">数位影像</a>的<a href="https://zh.wikipedia.org/wiki/%E5%83%8F%E7%B4%A0">像素</a>中，宽和高之间的<a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E7%8E%87">比率</a>。大多数的数位成像系统，会将影像显示为很多微小的正方型像素格。但部分成像系统，尤其是必须与<a href="https://zh.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E7%95%AB%E8%B3%AA%E9%9B%BB%E8%A6%96">标准画质电视</a>相容者，会将影像显示为长方形的像素格。像素格的宽和高不一定等长，因此就用像素宽高比来描述之。</p>
<p><strong>像素宽高比</strong>通常会用于描述标准画质电视相关的影像，除了少数特例以外。大多数的成像系统，包括遵守<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%BD%B1%E7%94%B5%E8%A7%86%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%8D%8F%E4%BC%9A">电影电视工程师协会</a>标准和实务的系统，皆是使用正方像素。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/7/73/PAR-1to1.jpg" alt="PAR-1to1"></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/ac/PAR-2to1.jpg" alt="PAR-2to1"></p>
<h3 id="Storage-aspect-ratio-SAR"><a href="#Storage-aspect-ratio-SAR" class="headerlink" title="Storage aspect ratio (SAR)"></a><strong><a href="https://en.wikipedia.org/wiki/Aspect_ratio_(image)#storage_aspect_ratio">Storage aspect ratio</a></strong> (<strong>SAR</strong>)</h3><p>显示宽高比 Display Aspect Ratio（DAR），不同于存储宽高比 Storage Aspect Ratio（SAR），后者指的是<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E8%BE%A8%E7%8E%87#%E5%83%8F%E7%B4%A0%E5%AF%86%E5%BA%A6%E8%88%87%E5%83%8F%E7%B4%A0%E7%B8%BD%E6%95%B8">像素总数</a>的比值。当影像是用长方像素而非正方像素显示时，这两种宽高比就会不一样。像素本身的比例，称之为像素宽高比 Pixel Aspect Ratio （PAR），譬如正方像素就是1:1。三者之间的关系为：</p>
<p>DAR &#x3D; SAR × PAR </p>
<p>一个 640 x 480 的 <a href="https://zh.wikipedia.org/wiki/%E8%A7%86%E9%A2%91%E5%9B%BE%E5%BD%A2%E9%98%B5%E5%88%97">VGA</a> 影像其 SAR 为 640&#x2F;480 &#x3D; 4:3，当显示在一个 4:3 的显示器上时（DAR &#x3D; 4:3），其像素宽高比就为 1:1。相对而言，一个 720 x 576 的 D-1 <a href="https://zh.wikipedia.org/wiki/PAL%E5%88%B6%E5%BC%8F">PAL</a> 影像其 SAR 为 5:4，若也显示在 4:3 的显示器上（DAR &#x3D; 4:3），可知其像素宽高比就为 (4:3)&#x2F;(5:4) &#x3D; 16:15。</p>
<h2 id="令人困惑的地方"><a href="#令人困惑的地方" class="headerlink" title="令人困惑的地方"></a>令人困惑的地方</h2><table>
<thead>
<tr>
<th>origin</th>
<th align="center">formula</th>
</tr>
</thead>
<tbody><tr>
<td>FFmpeg:</td>
<td align="center">DAR (Display Aspect Ratio) &#x3D; SAR (Sample Aspect Ratio) × PAR (Picture Aspect Ratio)</td>
</tr>
<tr>
<td>Wikipedia:</td>
<td align="center">DAR (Display Aspect Ratio) &#x3D; SAR (Storage Aspect Ratio) × PAR (Pixel Aspect Ratio)</td>
</tr>
</tbody></table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://en.wikipedia.org/wiki/Aspect_ratio_(image)#storage_aspect_ratio">https://en.wikipedia.org/wiki/Aspect_ratio_(image)#storage_aspect_ratio</a></p>
<p><a href="https://en.wikipedia.org/wiki/Pixel_aspect_ratio">https://en.wikipedia.org/wiki/Pixel_aspect_ratio</a></p>
<p><a href="https://en.wikipedia.org/wiki/Display_aspect_ratio">https://en.wikipedia.org/wiki/Display_aspect_ratio</a></p>
<p><a href="https://lists.ffmpeg.org/pipermail/ffmpeg-user/2020-September/050282.html">https://lists.ffmpeg.org/pipermail/ffmpeg-user/2020-September/050282.html</a></p>
<p><a href="https://www.animemusicvideos.org/guides/avtech3/theory-videoaspectratios.html">https://www.animemusicvideos.org/guides/avtech3/theory-videoaspectratios.html</a></p>
<p><a href="https://trac.ffmpeg.org/wiki/Scaling">https://trac.ffmpeg.org/wiki/Scaling</a></p>
<p><a href="https://stackoverflow.com/questions/18877243/why-ffmpeg-print-sar-instead-of-par">https://stackoverflow.com/questions/18877243/why-ffmpeg-print-sar-instead-of-par</a></p>
]]></content>
      <tags>
        <tag>FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux core dump 分析</title>
    <url>/2022/03/05/Linux-core-dump-%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>有时，直接调试应用程序是不可能的。在这些情况下，可以在应用程序终止时收集有关该应用程序的信息，然后对其进行分析。识别应用程序中崩溃问题的最有效方法之一是通过分析 Core dump文件。</p>
<span id="more"></span> 

<h2 id="什么是Core-dump文件"><a href="#什么是Core-dump文件" class="headerlink" title="什么是Core dump文件?"></a>什么是Core dump文件?</h2><p>​		<a href="https://en.wikipedia.org/wiki/Core_dump">Core dump</a> 是操作系统在进程收到某些信号而终止运行时，将此时进程地址空间的内容以及有关进程状态的其他信息写入一个磁盘文件。这种信息可以用于调试。它是应用程序停止工作时应用程序内存的一部分的副本，Linux 系统中以ELF格式存储。它包含应用程序的所有内部变量和堆栈，从而允许检查应用程序的最终状态。在使用可执行文件和调试信息进行扩充时，可以使用调试器以类似于分析正在运行的程序的方式分析 Core dump 文件。</p>
<p>除了整个系统内存或中止的程序的一部分，Core dump 文件包括额外的信息，如:</p>
<ul>
<li>处理器的状态</li>
<li>处理器寄存器的内容</li>
<li>内存管理信息</li>
<li>程序的计数器和堆栈指针</li>
<li>操作系统和处理器信息和标志</li>
</ul>
<p>Core dump 也被称为 memory dump, storage dump 或者直接称为 dump.</p>
<h2 id="生成Core-dump文件"><a href="#生成Core-dump文件" class="headerlink" title="生成Core dump文件"></a>生成Core dump文件</h2><p>1.开启core dumps，修改&#x2F;etc&#x2F;systemd&#x2F;system.conf文件，将“DefaultLimitCORE”一行修改为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DefaultLimitCORE=infinity</span><br></pre></td></tr></table></figure>

<p>2.重启系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">shutdown -r now</span></span><br></pre></td></tr></table></figure>

<p>3.解除core dump文件大小的限制:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ulimit</span> -c unlimited</span></span><br></pre></td></tr></table></figure>

<p>使用ulimit -a 查看是否生效，如需回退，设置该值为0而不是unlimited。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ulimit</span> -a</span></span><br><span class="line">-t: cpu time (seconds)              unlimited</span><br><span class="line">-f: file size (blocks)              unlimited</span><br><span class="line">-d: data seg size (kbytes)          unlimited</span><br><span class="line">-s: stack size (kbytes)             8192</span><br><span class="line">-c: core file size (blocks)         0</span><br><span class="line">-m: resident set size (kbytes)      unlimited</span><br><span class="line">-u: processes                       3789</span><br><span class="line">-n: file descriptors                1024</span><br><span class="line">-l: locked-in-memory size (kbytes)  65536</span><br><span class="line">-v: address space (kbytes)          unlimited</span><br><span class="line">-x: file locks                      unlimited</span><br><span class="line">-i: pending signals                 3789</span><br><span class="line">-q: bytes in POSIX msg queues       819200</span><br><span class="line">-e: max nice                        0</span><br><span class="line">-r: max rt priority                 0</span><br><span class="line">-N 15:                              unlimited</span><br></pre></td></tr></table></figure>

<p>4.当应用程序崩溃时，将生成一个core dump文件。默认情况下，将在应用程序的工作目录中生成一个名为core的文件, 从Linux 2.6开始，可以通过修改 <strong>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern</strong>文件更改该行为, 可以定义一个用于命名core dump文件的模板。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/sys/kernel/core_pattern</span></span><br><span class="line">|/usr/share/apport/apport %p %s %c %d %P %E</span><br></pre></td></tr></table></figure>

<p>但是, 在Ubuntu 20.04系统中, <em>apport</em>是<em>ubuntu</em>上的crash report服务, 在apport启用的时候，core dump文件在以下路径:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/var/lib/apport/coredump </span><br></pre></td></tr></table></figure>

<h2 id="分析Core-dump文件"><a href="#分析Core-dump文件" class="headerlink" title="分析Core dump文件"></a>分析Core dump文件</h2><p>Core dump是一个磁盘文件，包含进程终止时的内存映像，由Linux内核在处理SIGQUIT、SIGILL、SIGABRT、SIGFPE和SIGSEGV等信号时生成。</p>
<p>例如，当应用程序由于段错误(SIGSEGV)而崩溃时，会生成一个core文件。下面的代码块可以产生栈溢出。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> core_dump_test.c</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_buffer_overflow</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *buffer = <span class="string">&quot;buffer&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">100</span>;i &lt; <span class="number">1000</span>;i++)</span><br><span class="line">    	buffer[i] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">   	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	stack_buffer_overflow();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译这段代码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -g -o core_dump_test core_dump_test.c</span></span><br></pre></td></tr></table></figure>

<p>运行后，生成了一个core文件, 然后把它拷贝到当前目录，命名为core：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./core_dump_test</span></span><br><span class="line">[1]    1334 segmentation fault (core dumped)  ./core_dump_test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /var/lib/apport/coredump</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">core._home_ubuntu_Desktop_core_test.1000.a0870c1b-c0c8-4a05-b906-e8d6c19038b6.21071.13828388</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> core._home_ubuntu_Desktop_core_test.1000.a0870c1b-c0c8-4a05-b906-e8d6c19038b6.21071.13828388 core</span></span><br></pre></td></tr></table></figure>

<p>要详细分析core文件，使用GDB加载可执行文件和core文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb -c core core_dump_test</span></span><br><span class="line">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from core_dump_test...</span><br><span class="line">[New LWP 1617]</span><br><span class="line">Core was generated by `./core_dump_test&#x27;.</span><br><span class="line">Program terminated with signal SIGSEGV, Segmentation fault.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  0x00005589d3919176 <span class="keyword">in</span> stack_buffer_overflow () at core_dump_test.c:8</span></span><br><span class="line">8	    	buffer[i] = &#x27;O&#x27;;</span><br></pre></td></tr></table></figure>

<p>在gdb中，查看backtrace:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  0x00005589d3919176 <span class="keyword">in</span> stack_buffer_overflow () at core_dump_test.c:8</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  0x00005589d39191a7 <span class="keyword">in</span> main () at core_dump_test.c:12</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p>为了更好地查看源代码，我们可以在TUI模式下打开GDB:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb -c core core_dump_test -tui</span></span><br><span class="line">┌──core_dump_test.c─────────────────────────────────────────────────────────┐</span><br><span class="line">│   1           #include &lt;stdio.h&gt;                                          │</span><br><span class="line">│   2           #include &lt;stdlib.h&gt;                                         │</span><br><span class="line">│   3           #include &lt;string.h&gt;                                         │</span><br><span class="line">│   4                                                                       │</span><br><span class="line">│   5           void stack_buffer_overflow()&#123;                               │</span><br><span class="line">│   6               char *buffer = &quot;buffer&quot;;                                │</span><br><span class="line">│   7               for(int i = 100;i &lt; 1000;i++)                           │</span><br><span class="line">│  &gt;8                   buffer[i] = &#x27;O&#x27;;                                    │</span><br><span class="line">│   9                   printf(&quot;%s\n&quot;, buffer);                             │</span><br><span class="line">│   10          &#125;                                                           │</span><br><span class="line">│   11          int main()&#123;                                                 │</span><br><span class="line">│   12                  stack_buffer_overflow();                            │</span><br><span class="line">│   13                  return 0;                                           │</span><br><span class="line">│   14          &#125;                                                           │</span><br><span class="line">└───────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">core LWP 1617 In: stack_buffer_overflow             L8    PC: 0x5589d3919176</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">--Type &lt;RET&gt; for more, q to quit, c to continue without paging--</span><br><span class="line"></span><br><span class="line">Reading symbols from core_dump_test...</span><br><span class="line">[New LWP 1617]</span><br><span class="line">Core was generated by `./core_dump_test&#x27;.</span><br><span class="line">Program terminated with signal SIGSEGV, Segmentation fault.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  0x00005589d3919176 <span class="keyword">in</span> stack_buffer_overflow () at core_dump_test.c:8</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p>如果编译时没有添加-g, 调试信息和行号将无法解析：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  0x00005589d3919176 <span class="keyword">in</span> ?? ()</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  0x00005589d39191a7 <span class="keyword">in</span> ?? ()</span></span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://en.wikipedia.org/wiki/Core_dump">https://en.wikipedia.org/wiki/Core_dump</a></p>
<p><a href="https://man7.org/linux/man-pages/man5/core.5.html">https://man7.org/linux/man-pages/man5/core.5.html</a></p>
<p><a href="https://www.techopedia.com/definition/16251/core-dump#:~:text=A%20core%20dump%20is%20a,when%20the%20program%20ended%20atypically">https://www.techopedia.com/definition/16251/core-dump#:~:text=A%20core%20dump%20is%20a,when%20the%20program%20ended%20atypically</a></p>
<p><a href="https://embeddedbits.org/linux-core-dump-analysis/">https://embeddedbits.org/linux-core-dump-analysis/</a></p>
<p><a href="https://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html#:~:text=">https://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html#:~:text=</a>(A%20core%20dump%20is%20a,gdb%20to%20inspect%20the%20issue</p>
<p><a href="https://stackoverflow.com/questions/2065912/core-dumped-but-core-file-is-not-in-the-current-directory">https://stackoverflow.com/questions/2065912/core-dumped-but-core-file-is-not-in-the-current-directory</a></p>
<p><a href="https://askubuntu.com/questions/1349047/where-do-i-find-core-dump-files-and-how-do-i-view-and-analyze-the-backtrace-st">https://askubuntu.com/questions/1349047/where-do-i-find-core-dump-files-and-how-do-i-view-and-analyze-the-backtrace-st</a></p>
<p><a href="https://wiki.ubuntu.com/Apport">https://wiki.ubuntu.com/Apport</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下配置多个SSH-Key</title>
    <url>/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/</url>
    <content><![CDATA[<h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH-Key"></a>生成SSH-Key</h2><h3 id="打开终端，前往-ssh目录"><a href="#打开终端，前往-ssh目录" class="headerlink" title="打开终端，前往.ssh目录"></a>打开终端，前往.ssh目录</h3><p> <img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key1.png" alt="配置多个SSH-Key1"></p>
<span id="more"></span> 

<h3 id="生成一个SSH-Key"><a href="#生成一个SSH-Key" class="headerlink" title="生成一个SSH-Key"></a>生成一个SSH-Key</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;youremail@email.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义生成key的名字"><a href="#自定义生成key的名字" class="headerlink" title="自定义生成key的名字"></a>自定义生成key的名字</h3><p><img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key2.png" alt="配置多个SSH-Key2"></p>
<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p><img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key3.png" alt="配置多个SSH-Key3"></p>
<p>修改RSA私钥上的密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -p -f ~/.ssh/id_rsa_hostname</span><br></pre></td></tr></table></figure>

<h3 id="成功生成SSH-Key"><a href="#成功生成SSH-Key" class="headerlink" title="成功生成SSH-Key"></a>成功生成SSH-Key</h3><p><img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key4.png" alt="配置多个SSH-Key4"></p>
<h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH-Key"></a>配置SSH-Key</h3><p>在~&#x2F;.ssh&#x2F;目录下会生成id-rsa_hostname和id-rsa_hostname.pub私钥和公钥。 我们将id-rsa_hostname.pub中的内容粘帖到服务器的SSH-key的配置中。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> id_rsa_hostname.pub</span><br></pre></td></tr></table></figure>

<p> <img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key5.png" alt="Mac下配置多个SSH-Key5"></p>
<p>在GitHub的设置中粘贴公钥</p>
<p> <img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key6.png" alt="Mac下配置多个SSH-Key6"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>

<p> <img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key7.png" alt="Mac下配置多个SSH-Key8"></p>
<h2 id="配置多个SSH-Key"><a href="#配置多个SSH-Key" class="headerlink" title="配置多个SSH-Key"></a>配置多个SSH-Key</h2><h3 id="打开Finder前往-ssh文件夹"><a href="#打开Finder前往-ssh文件夹" class="headerlink" title="打开Finder前往.ssh文件夹"></a>打开Finder前往.ssh文件夹</h3><p> <img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key8.png" alt="Mac下配置多个SSH-Key7"></p>
<p> <img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key9.png" alt="Mac下配置多个SSH-Key8"></p>
<h3 id="编辑config文件"><a href="#编辑config文件" class="headerlink" title="编辑config文件"></a>编辑config文件</h3><p> <img src="/2016/11/10/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key10.png" alt="Mac下配置多个SSH-Key8"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github <span class="comment">//github对应的私钥</span></span><br><span class="line"> </span><br><span class="line"><span class="meta"># coding.net</span></span><br><span class="line">Host git.coding.net</span><br><span class="line">User youremail.com <span class="comment">//coding对应的email</span></span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/blog <span class="comment">//coding对应的私钥</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># coding.net</span></span><br><span class="line">Host git.coding.net</span><br><span class="line">User youremail.com <span class="comment">//coding对应的email</span></span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa <span class="comment">//coding对应的私钥</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mac OS</category>
      </categories>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-Android-Plugin</title>
    <url>/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B1.png" alt="Unity-Android-Plugin-开发教程1"></p>
<center>开发环境Windows平台（Unity2017.1.0f3 Personal ，Android Studio 2.3.3）</center>

<span id="more"></span> 

<h2 id="在Unity项目中构建和使用Android-Plugin"><a href="#在Unity项目中构建和使用Android-Plugin" class="headerlink" title="在Unity项目中构建和使用Android Plugin"></a>在Unity项目中构建和使用Android Plugin</h2><blockquote>
<p><a href="https://docs.unity3d.com/2017.1/Documentation/Manual/PluginsForAndroid.html">Unity支持几种类型的Android plug-ins：</a></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B2.png" alt="Unity-Android-Plugin-开发教程1"></p>
<ol>
<li>AAR 插件 和 Android Library</li>
<li>JAR 插件</li>
<li>继承UnityPlayerActivity</li>
<li>Native(C++) 插件</li>
</ol>
</blockquote>
<p><strong>Unity Android runtime</strong></p>
<blockquote>
<p><strong>Untiy Android runtime</strong>通过继承自<strong>FrameLayout</strong>的<strong>UnityPlayer</strong>实现，<strong>UnityPlayer</strong>实现了触控，键盘输入，相机，位置等特性。虽然这个<strong>UnityPlayer</strong>实现了大部分的<strong>native</strong>功能，但它不是应用程序的入口。</p>
</blockquote>
<p>在通用的Android Unity应用程序中，程序的入口是<strong>UnityPlayerActivity</strong>。如果你看一下APK文件反编译后的AndroidManifest.xml文件，可以看到它是如何标记<strong>UnityPlayerActivity</strong>作为应用程序的Launcher的。</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B3.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p>查看Unity安装目录发现，<strong>UnityPlayerActivity</strong>的源码可以在<strong>C:\Program Files\Unity\Editor\Data\PlaybackEngines\AndroidPlayer\Source</strong>中查看。</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B4.png" alt="Unity-Android-Plugin-开发教程1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnityPlayerActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> UnityPlayer mUnityPlayer; <span class="comment">// don&#x27;t change the name of this variable; referenced from native code</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup activity layout</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span> <span class="params">(Bundle savedInstanceState)</span></span><br><span class="line">    &#123;</span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        getWindow().setFormat(PixelFormat.RGBX_8888); <span class="comment">// &lt;--- This makes xperia play happy</span></span><br><span class="line"></span><br><span class="line">        mUnityPlayer = <span class="keyword">new</span> <span class="title class_">UnityPlayer</span>(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(mUnityPlayer);</span><br><span class="line">        mUnityPlayer.requestFocus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .........</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// For some reason the multiple keyevent type is not supported by the ndk.</span></span><br><span class="line">    <span class="comment">// Force event injection by overriding dispatchKeyEvent().</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_MULTIPLE)</span><br><span class="line">            <span class="keyword">return</span> mUnityPlayer.injectEvent(event);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.dispatchKeyEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   .........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到<strong>UnityPlayerActivity</strong>继承自<strong>Activity</strong>，并且<strong>UnityPlayerActivity</strong>持有一个<strong>UnityPlayer</strong>实例。<strong>UnityPlayerActivity</strong>通过<strong>UnityPlayer</strong>分派<strong>native</strong> 事件。</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B5.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p><a href="https://docs.unity3d.com/2017.1/Documentation/Manual/AndroidUnityPlayerActivity.html">通用的Android插件开发，通过继承<strong>UnityPlayerActivity</strong></a>，并使子类成为整个应用程序的<strong>LAUNCHER</strong> <strong>Activity</strong>，接下来将介绍继承<strong>UnityPlayerActivity</strong>方式的<strong>Android Plugin</strong> 。</p>
<h2 id="继承UnityPlayerActivity方式的Android-Plugin"><a href="#继承UnityPlayerActivity方式的Android-Plugin" class="headerlink" title="继承UnityPlayerActivity方式的Android Plugin"></a>继承<strong>UnityPlayerActivity</strong>方式的<strong>Android Plugin</strong></h2><p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B6.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p><strong>Android Plugin</strong>需要包含Android项目中<strong>build</strong>后得到的<strong>app-debug.aar</strong>和<strong>Manifest.xml</strong>以及资源文件等,提供给Unity项目使用。文件存放在Unity项目中的**&#x2F;Assets&#x2F;Plugins&#x2F;Android<strong>。Unity项目中的代码通过</strong>app-debug.aar**与封装在其中的Android代码进行交互。For more details about <strong>.aar</strong>, see <a href="https://developer.android.com/studio/projects/android-library.html#aar-contents">Android Developer Doc</a>. And for more information about <strong>“How Unity produces the Android Manifest”</strong>, see <a href="https://docs.unity3d.com/Manual/android-manifest.html">Unity Developer Doc</a></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B7.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B8.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p>那么，接下来新建Android项目，进而生成<strong>app-debug.aar</strong>文件和<strong>Manifest.xml</strong>文件。</p>
<h3 id="Android端的操作"><a href="#Android端的操作" class="headerlink" title="Android端的操作"></a>Android端的操作</h3><h4 id="新建Android-项目"><a href="#新建Android-项目" class="headerlink" title="新建Android 项目"></a>新建Android 项目</h4><p>1.将项目切换成project的视图，打开app目录下的build.gradle文件，</p>
<blockquote>
<p>1.将<strong>apply plugin: ‘com.android.application’<strong>，改成</strong>apply plugin: ‘com.android.library’</strong></p>
<p>2.然后删除<strong>applicationId</strong></p>
</blockquote>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B9.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p>2.修改<strong>Manifest.xml</strong>文件</p>
<p>在activity中添加</p>
<p><code>&lt;meta-data android:name=&quot;unityplaer.UnityActivity&quot; android:value=&quot;true&quot;/&gt;</code></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B10.png" alt="Unity-Android-Plugin-开发教程1"></p>
<h4 id="引入Unity的classes-jar包"><a href="#引入Unity的classes-jar包" class="headerlink" title="引入Unity的classes.jar包"></a>引入Unity的<strong>classes.jar</strong>包</h4><p>从Unity 的安装目录找到unity的classes.jar包。<br>Windows目录：</p>
<p><strong>C:\ProgramFiles\Unity\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\mono\Release\classes.jar</strong><br>Mac下目录：</p>
<p><strong>&#x2F;Applications&#x2F;Unity&#x2F;PlaybackEngines&#x2F;AndroidPlayer&#x2F;Variations&#x2F;mono&#x2F;Release&#x2F;Classes\classes.jar</strong><br>​将其拷贝到UnityAndroid项目app目录下的libs目录下，右键<strong>Add as library</strong>，导入之后可以发现在build.gradle中就有他的引入了。</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B11.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B12.png" alt="Unity-Android-Plugin-开发教程1"></p>
<h4 id="编写Android项目与Unity项目交互的代码"><a href="#编写Android项目与Unity项目交互的代码" class="headerlink" title="编写Android项目与Unity项目交互的代码"></a>编写Android项目与Unity项目交互的代码</h4><p>首先需要让MainActivity继承<strong>UnityPlayerActivity</strong>,同时删除onCreate方法中的<strong>setContentView()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">UnityPlayerActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//示例1：</span></span><br><span class="line">    <span class="comment">//Unity端调用该函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ShowToast</span><span class="params">(<span class="keyword">final</span> String msg)</span>&#123;</span><br><span class="line">        <span class="comment">// 需要在UI线程下执行</span></span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                Toast.makeText(getApplicationContext(),msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>).setMessage(msg).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//示例2：</span></span><br><span class="line">    <span class="comment">//Unity端调用该函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUnityText</span><span class="params">()</span>&#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                Toast.makeText(getApplicationContext(),<span class="string">&quot;Android 端调用setText&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="comment">//调用Unity端函数</span></span><br><span class="line">                UnityPlayer.UnitySendMessage(<span class="string">&quot;Canvas&quot;</span>,<span class="string">&quot;setText&quot;</span>,<span class="string">&quot;Android 端调用setText&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Build得到app-debug-aar文件和Manifest-xml文件"><a href="#Build得到app-debug-aar文件和Manifest-xml文件" class="headerlink" title="Build得到app-debug.aar文件和Manifest.xml文件"></a>Build得到<strong>app-debug.aar</strong>文件和<strong>Manifest.xml</strong>文件</h4><p>分别在&#x2F;app&#x2F;build&#x2F;outputs&#x2F;aar和&#x2F;app&#x2F;src&#x2F;main目录下</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B13.png" alt="Unity-Android-Plugin-开发教程1"></p>
<p>接下来需要将<strong>app-debug.aar</strong>用解压软件打开，并且删除<strong>libs</strong>目录下的<strong>classes.jar</strong></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B14.png" alt="Unity-Android-Plugin-开发教程1"></p>
<h3 id="Unity端的操作"><a href="#Unity端的操作" class="headerlink" title="Unity端的操作"></a>Unity端的操作</h3><h4 id="创建Unity项目"><a href="#创建Unity项目" class="headerlink" title="创建Unity项目"></a>创建Unity项目</h4><p>新建Unity项目，并新建如下目录将Android端得到的<strong>app-debug.aar</strong>文件和<strong>Manifest.xml</strong>文件放在**&#x2F;Plugins&#x2F;Android**目录下,同时在Hierarchy下按照图示新建Canvas,Button和Text：</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B15.png" alt="Unity-Android-Plugin-开发教程1"></p>
<h4 id="编写C-脚本"><a href="#编写C-脚本" class="headerlink" title="编写C#脚本"></a>编写C#脚本</h4><p>同时新建名为AndroidTest.cs的C#脚本：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AndroidTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Update is called once per frame</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Update</span> ()</span> &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BtnShowMessage</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">using</span> (AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span>(AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 调用Android端方法</span></span><br><span class="line">                jo.Call(<span class="string">&quot;ShowToast&quot;</span>, <span class="string">&quot;Unity调用了Android中的AlertDialog&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BtnSetText</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 调用Android端方法</span></span><br><span class="line">                jo.Call(<span class="string">&quot;setUnityText&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Android端调用该方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span>(<span class="params"><span class="built_in">string</span> result</span>)</span>&#123;</span><br><span class="line">		Text text = GameObject.Find (<span class="string">&quot;UnityText&quot;</span>).GetComponent&lt;Text&gt; ();</span><br><span class="line">		text.text = result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h4><p>按照标号步骤进行1. 选择Build的平台-&gt;-&gt;2. 添加<strong>Scenes</strong> -&gt;-&gt; 3. 设置<strong>Identification</strong> -&gt;-&gt; 4. 设置包名和 API Level -&gt;-&gt; 5. 编译运行</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B16.png" alt="Unity-Android-Plugin-开发教程1"></p>
<h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B1.gif" alt="Unity-Android-Plugin-开发教程1"></p>
<h2 id="使用AAR或JAR方式的Android-Plugin"><a href="#使用AAR或JAR方式的Android-Plugin" class="headerlink" title="使用AAR或JAR方式的Android Plugin"></a>使用<strong>AAR</strong>或<strong>JAR</strong>方式的<strong>Android Plugin</strong></h2><h3 id="Android端的操作-1"><a href="#Android端的操作-1" class="headerlink" title="Android端的操作"></a>Android端的操作</h3><h4 id="在Android-Studio中新建项目"><a href="#在Android-Studio中新建项目" class="headerlink" title="在Android Studio中新建项目"></a>在Android Studio中新建项目</h4><p>1.选择<strong>Add No Activity</strong></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B17.png" alt="Unity-Android-Plugin-开发教程1"></p>
<ol>
<li>新建<strong>Modue</strong>，选择<strong>Android Library</strong></li>
</ol>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B18.png" alt="Unity-Android-Plugin-开发教程1"></p>
<ol>
<li><p>添加<strong>AndroidPlugin.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.IntentFilter;</span><br><span class="line"><span class="keyword">import</span> android.os.BatteryManager;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndroidPlugin</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Needed to get the battery level.</span></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AndroidPlugin</span><span class="params">(Context context)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the battery level as a float between 0 and 1 (1 being fully charged, 0 fulled discharged)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">GetBatteryPct</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">batteryStatus</span> <span class="operator">=</span> GetBatteryStatusIntent();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">scale</span> <span class="operator">=</span> batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">batteryPct</span> <span class="operator">=</span> level / (<span class="type">float</span>)scale;</span><br><span class="line">        <span class="keyword">return</span> batteryPct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return whether or not we&#x27;re currently on charge</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">IsBatteryCharging</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">batteryStatus</span> <span class="operator">=</span> GetBatteryStatusIntent();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> status == BatteryManager.BATTERY_STATUS_CHARGING ||</span><br><span class="line">                status == BatteryManager.BATTERY_STATUS_FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Intent <span class="title function_">GetBatteryStatusIntent</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">IntentFilter</span> <span class="variable">ifilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>(Intent.ACTION_BATTERY_CHANGED);</span><br><span class="line">        <span class="keyword">return</span> context.registerReceiver(<span class="literal">null</span>, ifilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Get System Time</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSysTime</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build Module之后，在模块的子目录**&#x2F;build&#x2F;outputs&#x2F;arr<strong>中得到</strong>.aar** 和 <strong>.jar</strong></p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B19.png" alt="Unity-Android-Plugin-开发教程1"></p>
</li>
</ol>
<h3 id="Unity端的操作-1"><a href="#Unity端的操作-1" class="headerlink" title="Unity端的操作"></a>Unity端的操作</h3><h4 id="创建Unity项目-1"><a href="#创建Unity项目-1" class="headerlink" title="创建Unity项目"></a>创建Unity项目</h4><p>将得到的**.arr**(将**.arr<strong>解压就可以得到</strong>.jar**) 放在<strong>Assert</strong>目录下，可以放在任意的目录下，<a href="https://docs.unity3d.com/2017.1/Documentation/Manual/AndroidAARPlugins.html">官方推荐使用**.aar**</a> 。并且按照如下目录新建Canvas和Text。</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B20.png" alt="Unity-Android-Plugin-开发教程1"></p>
<h4 id="编写C-脚本-1"><a href="#编写C-脚本-1" class="headerlink" title="编写C#脚本"></a>编写C#脚本</h4><p>编写<strong>BatteryLevelPlugin.cs</strong> :</p>
<blockquote>
<p><a href="https://docs.unity3d.com/2017.1/Documentation/Manual/AndroidJARPlugins.html">Unity提供了两种方式与java进行交互</a></p>
<ol>
<li><p>AndroidJNI 和 AndroidJNIHelper </p>
</li>
<li><p>AndroidJavaClass , AndroidJavaObject 和 AndroidJavaProxy</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B21.png" alt="Unity-Android-Plugin-开发教程1"></p>
</li>
</ol>
</blockquote>
<blockquote>
<p>同时，官方推荐如下调用方式：</p>
<p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B22.png" alt="Unity-Android-Plugin-开发教程1"></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatteryLevelPlugin</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">float</span> <span class="title">GetBatteryLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.platform == RuntimePlatform.Android)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">using</span> (var javaUnityPlayer = <span class="keyword">new</span> <span class="built_in">AndroidJavaClass</span>(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">using</span> (var currentActivity = javaUnityPlayer.<span class="built_in">GetStatic</span>&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">using</span> (var androidPlugin = <span class="keyword">new</span> <span class="built_in">AndroidJavaObject</span>(<span class="string">&quot;com.hiscene.androidsysinfo.AndroidPlugin&quot;</span>, currentActivity))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> androidPlugin.<span class="built_in">Call</span>&lt;<span class="type">float</span>&gt;(<span class="string">&quot;GetBatteryPct&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> string <span class="title">GetSysTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AndroidJNI.<span class="built_in">AttachCurrentThread</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        IntPtr javaClass = AndroidJNI.<span class="built_in">FindClass</span>(<span class="string">&quot;com/unity3d/player/UnityPlayer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IntPtr fid = AndroidJNI.<span class="built_in">GetStaticFieldID</span>(javaClass, <span class="string">&quot;currentActivity&quot;</span>, <span class="string">&quot;Landroid/app/Activity;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IntPtr obj = AndroidJNI.<span class="built_in">GetStaticObjectField</span>(javaClass, fid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        IntPtr pluginClass = AndroidJNI.<span class="built_in">FindClass</span>(<span class="string">&quot;com/hiscene/androidsysinfo/AndroidPlugin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IntPtr initMethod = AndroidJNI.<span class="built_in">GetMethodID</span>(pluginClass, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Landroid/content/Context;)V&quot;</span>);</span><br><span class="line"></span><br><span class="line">        jvalue[] jv = <span class="keyword">new</span> jvalue[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">        </span><br><span class="line">        IntPtr pobj = AndroidJNI.<span class="built_in">NewObject</span>(pluginClass, initMethod,jv);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        IntPtr enableMethod = AndroidJNI.<span class="built_in">GetMethodID</span>(pluginClass, <span class="string">&quot;getSysTime&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> AndroidJNI.<span class="built_in">CallStringMethod</span>(pobj, enableMethod, <span class="keyword">new</span> jvalue[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> string <span class="title">GetSysTimeAndroidJNI</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        AndroidJNI.<span class="built_in">AttachCurrentThread</span>();</span><br><span class="line"></span><br><span class="line">        IntPtr javaClass = AndroidJNI.<span class="built_in">FindClass</span>(<span class="string">&quot;com/hiscene/androidsysinfo/SysTime&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IntPtr initMethod = AndroidJNI.<span class="built_in">GetMethodID</span>(javaClass, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        IntPtr pobj = AndroidJNI.<span class="built_in">NewObject</span>(javaClass, initMethod, AndroidJNIHelper.<span class="built_in">CreateJNIArgArray</span>(<span class="keyword">new</span> object[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        IntPtr enableMethod = AndroidJNI.<span class="built_in">GetMethodID</span>(javaClass, <span class="string">&quot;getSysTime&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> AndroidJNI.<span class="built_in">CallStringMethod</span>(pobj, enableMethod, <span class="keyword">new</span> jvalue[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//方式二：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> string <span class="title">GetSysTimeAndroidJavaClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.platform == RuntimePlatform.Android)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">using</span> (var javaUnityPlayer = <span class="keyword">new</span> <span class="built_in">AndroidJavaClass</span>(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">using</span> (var currentActivity = javaUnityPlayer.<span class="built_in">GetStatic</span>&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">using</span> (var androidPlugin = <span class="keyword">new</span> <span class="built_in">AndroidJavaObject</span>(<span class="string">&quot;com.hiscene.androidsysinfo.AndroidPlugin&quot;</span>, currentActivity))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> androidPlugin.<span class="built_in">Call</span>&lt;string&gt;(<span class="string">&quot;getSysTime&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Time yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编写<strong>BatteryMonitor.cs</strong> :</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatteryMonitor</span> : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Text batteryLevelText;</span><br><span class="line">    <span class="keyword">public</span> Text batteryLevelIcon;</span><br><span class="line">    <span class="keyword">public</span> Text sysTime;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> readonly string BATTERY_LEVEL_100 = Char.<span class="built_in">ConvertFromUtf32</span>(<span class="number">0xf240</span>);</span><br><span class="line">    <span class="type">static</span> readonly string BATTERY_LEVEL_75 = Char.<span class="built_in">ConvertFromUtf32</span>(<span class="number">0xf241</span>);</span><br><span class="line">    <span class="type">static</span> readonly string BATTERY_LEVEL_50 = Char.<span class="built_in">ConvertFromUtf32</span>(<span class="number">0xf242</span>);</span><br><span class="line">    <span class="type">static</span> readonly string BATTERY_LEVEL_25 = Char.<span class="built_in">ConvertFromUtf32</span>(<span class="number">0xf243</span>);</span><br><span class="line">    <span class="type">static</span> readonly string BATTERY_LEVEL_0 = Char.<span class="built_in">ConvertFromUtf32</span>(<span class="number">0xf244</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Update</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">UpdateStatusIndicators</span>();</span><br><span class="line">        sysTime.text = BatteryLevelPlugin.<span class="built_in">GetSysTime</span>();</span><br><span class="line">        </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">UpdateStatusIndicators</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var currentBatteryLevel = BatteryLevelPlugin.<span class="built_in">GetBatteryLevel</span>() * <span class="number">100</span>f;</span><br><span class="line">        batteryLevelText.text = String.<span class="built_in">Format</span>(<span class="string">&quot;&#123;0&#125;%&quot;</span>, currentBatteryLevel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Show the icon that matches the current level most closely.</span></span><br><span class="line">        <span class="keyword">if</span> (currentBatteryLevel &gt;= <span class="number">88</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            batteryLevelIcon.text = BATTERY_LEVEL_100;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (currentBatteryLevel &gt;= <span class="number">63</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            batteryLevelIcon.text = BATTERY_LEVEL_75;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (currentBatteryLevel &gt;= <span class="number">38</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            batteryLevelIcon.text = BATTERY_LEVEL_50;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (currentBatteryLevel &gt;= <span class="number">13</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            batteryLevelIcon.text = BATTERY_LEVEL_25;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            batteryLevelIcon.text = BATTERY_LEVEL_0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="按照步骤编译运行"><a href="#按照步骤编译运行" class="headerlink" title="按照步骤编译运行"></a>按照步骤编译运行</h4><p>步骤：1. 选择Build的平台-&gt;-&gt;2. 添加<strong>Scenes</strong> -&gt;-&gt; 3. 设置<strong>Identification</strong> -&gt;-&gt; 4. 设置包名和 API Level -&gt;-&gt; 5. 编译运行</p>
<h4 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h4><p><img src="/2017/07/28/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/Unity-Android-Plugin-%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B2.gif" alt="Unity-Android-Plugin-开发教程1"></p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><a href="https://github.com/rolyyu/UnityAndroidPlugin">https://github.com/rolyyu/UnityAndroidPlugin</a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://docs.unity3d.com/Manual/PluginsForAndroid.html">[1] https://docs.unity3d.com/Manual/PluginsForAndroid.html</a></p>
<p><a href="http://www.voidcn.com/blog/Silk2018/article/p-6632911.html">[2] http://www.voidcn.com/blog/Silk2018/article/p-6632911.html</a></p>
<p><a href="http://blog.csdn.net/zhangdi2017/article/details/65629589">[3] http://blog.csdn.net/zhangdi2017/article/details/65629589</a></p>
<p><a href="https://www.yangzhenlin.com/unity-android-plugin/">[4] https://www.yangzhenlin.com/unity-android-plugin/</a></p>
<p><a href="https://medium.com/@datdeveloper/how-to-make-android-plugin-for-unity-take-photo-from-camera-and-gallery-c12fe247c770">[5] https:&#x2F;&#x2F;medium.com&#x2F;@datdeveloper&#x2F;how-to-make-android-plugin-for-unity-take-photo-from-camera-and-gallery-c12fe247c770</a></p>
<p><a href="http://addcomponent.com/android-native-plugin-unity/">[6] http://addcomponent.com/android-native-plugin-unity/</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Polymorphism</title>
    <url>/2024/12/29/Polymorphism/</url>
    <content><![CDATA[<p>Object-oriented programming (OOP) is a programming paradigm based on the concept of objects, which can contain data and code: data in the form of fields (often known as attributes or properties), and code in the form of procedures (often known as methods). </p>
<span id="more"></span> 

<h2 id="OOP-has-four-main-features"><a href="#OOP-has-four-main-features" class="headerlink" title="OOP has four main features:"></a>OOP has four main features:</h2><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>Wrapping data and code together into a single unit, like a gift.</p>
<h3 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h3><p>Hiding unnecessary details and showing only the important ones, like a summary of a book.</p>
<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Creating new objects based on existing objects, like a child inheriting traits from their parents.</p>
<h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>Allowing objects to behave differently depending on their type, like a car and a boat both being able to “move” but in different ways. </p>
<h2 id="Polymorphism-forms"><a href="#Polymorphism-forms" class="headerlink" title="Polymorphism forms"></a>Polymorphism forms</h2><p>In object-oriented programming, polymorphism is the provision of a single interface to entities of different types. The concept is borrowed from a principle in biology where an organism or species can have many different forms or stages.</p>
<p>The most commonly recognized major forms of polymorphism are:</p>
<ul>
<li>Ad hoc polymorphism: defines a common interface for an arbitrary set of individually specified types.</li>
<li>Parametric polymorphism: not specifying concrete types and instead use abstract symbols that can substitute for any type.</li>
<li>Subtyping (also called subtype polymorphism or inclusion polymorphism): when a name denotes instances of many different classes related by some common superclass.</li>
</ul>
<h3 id="Ad-hoc-polymorphism"><a href="#Ad-hoc-polymorphism" class="headerlink" title="Ad hoc polymorphism"></a>Ad hoc polymorphism</h3><p>It is a kind of polymorphism in which polymorphic functions can be applied to arguments of different types, because a polymorphic function can denote a number of distinct and potentially heterogeneous implementations depending on the type of argument(s) to which it is applied. </p>
<p>Function overloading</p>
<p>Operator overloading</p>
<h3 id="Parametric-polymorphism"><a href="#Parametric-polymorphism" class="headerlink" title="Parametric polymorphism"></a>Parametric polymorphism</h3><p>Generic function<br>Generic programming</p>
<h3 id="Subtyping"><a href="#Subtyping" class="headerlink" title="Subtyping"></a>Subtyping</h3><p>Virtual function<br>Single and dynamic dispatch</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://en.wikipedia.org/wiki/Object-oriented_programming">https://en.wikipedia.org/wiki/Object-oriented_programming</a></p>
<p><a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">https://en.wikipedia.org/wiki/Polymorphism_(computer_science)</a></p>
<p><a href="https://www.naukri.com/code360/library/characteristics-of-object-oriented-programming">https://www.naukri.com/code360/library/characteristics-of-object-oriented-programming</a></p>
<p><a href="https://www.geeksforgeeks.org/introduction-of-object-oriented-programming/">https://www.geeksforgeeks.org/introduction-of-object-oriented-programming/</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Video Buffer Verifier</title>
    <url>/2022/09/07/Video-Buffer-Verifier/</url>
    <content><![CDATA[<p>The <strong>Video Buffering Verifier</strong> (VBV) is a theoretical <a href="https://en.wikipedia.org/wiki/MPEG">MPEG</a> video buffer model, used to ensure that an encoded video stream can be correctly buffered, and played back at the decoder device.</p>
<span id="more"></span> 

<p>By definition, the VBV shall not overflow nor underflow when its input is a compliant stream, (except in the case of low_delay). It is therefore important when encoding such a stream that it comply with the VBV requirements.</p>
<p>One way to think of the VBV is to consider both a maximum bitrate and a maximum buffer size. You’ll need to know how quickly the video data is coming into the buffer. Keep in mind that video data is always changing the bitrate so there is no constant number to note how fast the data is arriving. The larger question is how long before the buffer overflows. A larger buffer size simply means that the decoder will tolerate high bitrates for longer periods of time, but no buffer is infinite, so eventually even a large buffer will overflow.</p>
<p>There are two operational modes of VBV: <em><a href="https://en.wikipedia.org/wiki/Constant_Bit_Rate">Constant Bit Rate</a></em> (CBR) and <em><a href="https://en.wikipedia.org/wiki/Variable_Bit_Rate">Variable Bit Rate</a></em> (VBR). In CBR, the decoder’s buffer is filled over time at a constant data rate. In VBR, the buffer is filled at a non-constant rate. In both cases, data is removed from the buffer in varying chunks, depending on the actual size of the coded frames.</p>
<h2 id="VBV-and-CPB"><a href="#VBV-and-CPB" class="headerlink" title="VBV and CPB"></a>VBV and CPB</h2><p>Consider a water outlet, a water tank, and a series of “picture decode guys” lined up in front of the tank.</p>
<p><img src="/2022/09/07/Video-Buffer-Verifier/picture_decode_guys.webp" alt="image"></p>
<p>The water (coded MPEG-2 or H.264 stream) is constantly flowing into the tank. The guys are lined up in front of the tank and remove the water for each frame to be decoded. The removal happens at the fixed time interval in most cases.</p>
<p>Even though Mr.I, P, and B are removing different amount of water (&#x3D;each frame needs different number of bits), the water outlet speed is constant thanks to the tank (buffer).</p>
<p>In MPEG-2, the buffer is called VBV buffer (Video Buffer Verifier Buffer). In H.264, the buffer is called CPB (Coded Picture Buffer).</p>
<p>The water level of the tank at certain time instance is called buffer fullness and described in number of bits. The size of the tank is called VBV buffer size in MPEG-2 and CPB buffer size in H.264.</p>
<p>The coded stream must be constructed so that the tank (&#x3D;buffer) never overflow or underflow. </p>
<h2 id="bufsize-and-maxrate"><a href="#bufsize-and-maxrate" class="headerlink" title="bufsize and maxrate"></a>bufsize and maxrate</h2><p>Basically the VBV enables you to make sure the encoded stream doesn’t overflow or underflow the decoder’s buffer. If too much data comes in fast the buffer will overflow and you’ll be forced to drop some of it. If data is coming in too slow the buffer will run out and the playback will stall.</p>
<p>It’s a bit counter-intuitive but a <strong>VBV underflow</strong> signals an encoder rate buffer <em>overflow</em> (video bitrate larger than the input rate) while a <strong>VBV overflow</strong> signals an encoder rate buffer <em>underflow</em> (video bitrate lower than input the rate).</p>
<p>For <code>ffmpeg</code> the <code>bufsize</code> is the size of the buffer. <code>minrate</code> and <code>maxrate</code> are used in conjunction with <code>bufsize</code> to set the max and min bitrate change tolerance for VBR (variable bitrate).</p>
<p><code>minrate</code> is typically used along with <code>maxrate</code> to achieve near-CBR (constant bitrate).</p>
<p><code>maxrate</code> is not the peak bitrate, it’s rather the maximum bitrate that can enter the buffer ( as shown above, it is the speed at which water comes out of the water outlet).  If you have a large buffer, you can tolerate a higher bitrate for a greater amount of time until the buffer overflows. VBV makes sure your bitrate is lowered before that happens.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://en.wikipedia.org/wiki/Video_buffering_verifier">https://en.wikipedia.org/wiki/Video_buffering_verifier</a></p>
<p><a href="https://codesequoia.wordpress.com/2010/04/19/what-are-cbr-vbv-and-cpb/">https://codesequoia.wordpress.com/2010/04/19/what-are-cbr-vbv-and-cpb/</a></p>
<p><a href="https://stackoverflow.com/questions/33611900/what-is-vbv-video-buffering-verifier-in-h-264">https://stackoverflow.com/questions/33611900/what-is-vbv-video-buffering-verifier-in-h-264</a></p>
<p><a href="https://trac.ffmpeg.org/wiki/Encode/H.264">https://trac.ffmpeg.org/wiki/Encode/H.264</a></p>
<p><a href="https://trac.ffmpeg.org/wiki/Limiting%20the%20output%20bitrate">https://trac.ffmpeg.org/wiki/Limiting%20the%20output%20bitrate</a></p>
]]></content>
      <tags>
        <tag>x264</tag>
      </tags>
  </entry>
  <entry>
    <title>理解C/C++编译</title>
    <url>/2020/08/09/%E7%90%86%E8%A7%A3C-C-%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>编译和链接是在C&#x2F;C++软件开发过程中经常发生的两个非常基本的过程，为什么C&#x2F;C++源代码分割成头文件和源文件? 编译器是如何看到每个部分的? 这如何影响编译和链接? 还有许多类似的问题，无论是在设计C&#x2F;C++应用程序、为其实现新特性、试图解决bug(尤其是某些奇怪的bug)，还是试图让C和C&#x2F;C++代码协同工作，了解如何编译和链接将节省大量时间。</p>
<span id="more"></span> 

<h2 id="预处理-编译和链接"><a href="#预处理-编译和链接" class="headerlink" title="预处理 编译和链接"></a>预处理 编译和链接</h2><p><img src="/2020/08/09/%E7%90%86%E8%A7%A3C-C-%E7%BC%96%E8%AF%91/C_DevelopmentProcesses.png" alt="preprocessor_compliler_linker_loader"></p>
<p><strong>编译器</strong>（compiler）是一种<a href="https://en.wikipedia.org/wiki/Computer_program">计算机程序</a>，它会将某种编程语言写成的<a href="https://en.wikipedia.org/wiki/Programming_language">源代码</a>（原始语言）转换成另一种编程语言（目标语言）。它主要的目的是将便于人编写、阅读、维护的高级计算机语言所写作的<a href="https://en.wikipedia.org/wiki/Programming_language">源代码</a>程序，翻译为计算机能解读、运行的低阶机器语言的程序，也就是<a href="https://en.wikipedia.org/wiki/Executable">可执行文件</a>。编译器将原始程序（source program）作为输入，翻译产生使用目标语言（target language）的等价程序。<a href="https://en.wikipedia.org/wiki/Programming_language">源代码</a>一般为高级语言（High-level language），如Pascal、C、C++、C# 、Java等，而目标语言则是汇编语言或目标机器的<a href="https://en.wikipedia.org/wiki/Object_code">目标代码</a>（Object code），有时也称作<a href="https://en.wikipedia.org/wiki/Machine_code">机器代码</a>（Machine code）。</p>
<p>一个现代编译器的主要工作流程如下：</p>
<p><a href="https://en.wikipedia.org/wiki/Source_code">源代码</a>（source code）→ <a href="https://en.wikipedia.org/wiki/Preprocessor">预处理器</a>（preprocessor）→ <a href="https://en.wikipedia.org/wiki/Compiler">编译器</a>（compiler）→ <a href="https://en.wikipedia.org/wiki/Assembly_language">汇编程序</a>（assembler）→ <a href="https://en.wikipedia.org/wiki/Object_code">目标代码</a>（object code）→ <a href="https://en.wikipedia.org/wiki/Linker_(computing)">链接器</a>（linker）→ <a href="https://en.wikipedia.org/wiki/Executable">可执行文件</a>（executables），最后打包好的文件就可以给电脑去判读运行了。</p>
<p>每个c++源文件都需要编译成目标文件。编译多个源文件产生的目标文件然后链接到可执行文件、共享库或静态库。c++源文件通常具有.cpp、.cxx或.cc扩展名后缀。c++源文件可以包含其他文件，称为头文件，使用#include指令。头文件具有.h、.hpp或.hxx这样的扩展名，或者完全没有扩展名，就像c++标准库和其他库的头文件(如Qt)中那样。扩展对于c++预处理器来说并不重要，它会将包含#include指令的行替换为所包含文件的全部内容。</p>
<p>编译器对源文件执行的第一步是在其上运行预处理器。只有源文件被传递给编译器(进行预处理和编译)。头文件不传递给编译器。相反，它们是从源文件中包含的。在所有源文件的预处理阶段，每个头文件都可以被打开多次，具体取决于有多少源文件包含了它们，或者有多少源文件中包含的其他头文件也包含了它们(可能有许多间接级别)。另一方面，编译器(和预处理器)只会在源文件被传递给编译器时打开一次。</p>
<p>对于每一个C&#x2F;C++源文件, 当它发现一个#include指令时，预处理器通过插入内容将构建一个翻译单元；与此同时，若找到条件编译模块的求值结果为false时，它会剥离代码源文件和指令的头。它还将完成一些其他任务，比如宏替换。一旦预处理器完成创建(有时是巨大的)转换单元，编译器就开始编译阶段并生成目标文件。</p>
<p><a href="https://gcc.gnu.org/">GNU C和C++编译器</a>分别称为gcc和g++。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-c</td>
<td align="left">只编译并生成目标文件。</td>
</tr>
<tr>
<td align="left">-E</td>
<td align="left">只运行 C 预编译器。</td>
</tr>
<tr>
<td align="left">-g</td>
<td align="left">生成调试信息。GNU 调试器可利用该信息。</td>
</tr>
<tr>
<td align="left">-o FILE</td>
<td align="left">生成指定的输出文件。用在生成可执行文件时。</td>
</tr>
<tr>
<td align="left">-O0</td>
<td align="left">不进行优化处理。</td>
</tr>
<tr>
<td align="left">-O 或 -O1</td>
<td align="left">优化生成代码。</td>
</tr>
<tr>
<td align="left">-O2</td>
<td align="left">进一步优化。</td>
</tr>
<tr>
<td align="left">-O3</td>
<td align="left">比 -O2 更进一步优化，包括 inline 函数。</td>
</tr>
<tr>
<td align="left">-w</td>
<td align="left">不生成任何警告信息。</td>
</tr>
<tr>
<td align="left">-Wall</td>
<td align="left">生成所有警告信息。</td>
</tr>
</tbody></table>
<p>下面是一个示例:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello_c.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, C world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello_cpp.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Hello, C++ world!&quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过以下方法创建预处理文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -E hello_c.c -o hello_c.ii</span><br><span class="line">$ g++ -E hello_cpp.cpp -o hello_cpp.ii</span><br></pre></td></tr></table></figure>

<p>看行数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">wc</span> -l hello.ii</span><br><span class="line">544 hello.ii</span><br><span class="line">$ <span class="built_in">wc</span> -l hello_cpp.ii</span><br><span class="line">41840 hello_cpp.ii</span><br></pre></td></tr></table></figure>

<p>在我的机器中hello.ii有544行代码, hello_cpp.ii有41840行代码。我们可以看到，编译器必须编译一个比我们看到的简单源文件大得多的文件。这是因为包含了头文件。在我们的示例中，我们只包含了一个header。随着我们不断包含头文件，翻译单元变得越来越大。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -c hello_c.c</span><br><span class="line">$ gcc -o hello_c.out hello_c.o</span><br><span class="line">$ ./hello_c.out</span><br><span class="line">Hello, C world!</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ g++ -c hello_cpp.cpp</span><br><span class="line">$ g++ -o hello_cpp.out hello_cpp.o</span><br><span class="line">$ ./hello_cpp.out</span><br><span class="line">Hello, C++ world!</span><br></pre></td></tr></table></figure>

<h2 id="源文件如何导入和导出符号"><a href="#源文件如何导入和导出符号" class="headerlink" title="源文件如何导入和导出符号"></a>源文件如何导入和导出符号</h2><p>有一个简单的C(不是C++)源文件名为 print_num.c，它导出了两个函数，一个用于打印整数，另一个用于打印浮点数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">printI</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">printF</span><span class="params">(<span class="type">float</span> v)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译它以创建 print_num.o 目标文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -c print_num.c</span></span><br></pre></td></tr></table></figure>

<p>现在看看这个目标文件导出和导入的符号:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nm print_num.o</span></span><br><span class="line">0000000000000010 T _printF</span><br><span class="line">0000000000000000 T _printI</span><br></pre></td></tr></table></figure>

<p>没有符号被导入，导出两个符号 printF和printI。这些符号被导出为.text段(T)的一部分，因此它们是函数名、可执行代码。</p>
<p>标准的方法是创建一个头文件来声明它们，并将它们包含在我们想要调用的任何源文件中。头文件可以有任何名称和扩展名。下面的例子print_num.h：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">printI</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">printF</span><span class="params">(<span class="type">float</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125; <span class="comment">// end extern &quot;C&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>那些ifdef&#x2F;endif条件编译块是什么?如果我从C源文件中引用这个头文件，我希望它成为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">printI</span><span class="params">(<span class="type">int</span> v)</span>;</span><br><span class="line"><span class="type">float</span> <span class="title function_">printF</span><span class="params">(<span class="type">float</span> v)</span>;</span><br></pre></td></tr></table></figure>

<p>但如果如果我从C++源文件中引用这个头文件，我希望它成为:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">printI</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">float</span> <span class="title">printF</span><span class="params">(<span class="type">float</span> v)</span></span>;</span><br><span class="line">&#125; <span class="comment">// end extern &quot;C&quot;</span></span><br></pre></td></tr></table></figure>

<p>C语言不知道关于extern “C”指令的任何事情，但是c++知道，它需要将这个指令应用到C函数声明中。这是因为c++重整了<a href="https://en.wikipedia.org/wiki/Name_mangling">函数(和方法)的名称</a>，因为它支持函数&#x2F;方法重载，而C不支持。</p>
<p>这可以在名为print.cpp的c++源文件中看到:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// std::cout, std::endl</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print_num.h&quot;</span> <span class="comment">// printI, printF</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNum</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;printNum: &quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot;, printI: &quot;</span> &lt;&lt; <span class="built_in">printI</span>(v) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNum</span><span class="params">(<span class="type">float</span> v)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;printNum: &quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot;, printI: &quot;</span> &lt;&lt; <span class="built_in">printI</span>(v) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">printNumInt</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printNum</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">printNumFloat</span><span class="params">(<span class="type">float</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printNum</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有两个名称相同的函数(printNum)，只是它们的参数类型不同:int或float。函数重载是C++的一个特性，在C中没有。为了实现这个特性并区分这些函数，C++修改了函数名，我们可以在导出的符号名中看到(我只从nm的输出中选择相关的):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -c print.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nm print.o</span> </span><br><span class="line">0000000000000140 T __Z8printNumf</span><br><span class="line">0000000000000000 T __Z8printNumi</span><br><span class="line">                 U _printF</span><br><span class="line">                 U _printI</span><br><span class="line">00000000000001d0 T _printNumFloat</span><br><span class="line">00000000000001b0 T _printNumInt</span><br><span class="line">                 U __ZNSt3__14coutE</span><br></pre></td></tr></table></figure>

<p>在我的系统中，这些函数被导出为float版本的<code>__Z8printNumf</code>和int版本的<code>__Z8printNumi</code>。C++中的每个函数名都是混乱的，除非声明为extern “C”。在print中有两个函数是用C链接声明的。printSumInt和printSumFloat。</p>
<p>因此，它们不能被重载，或者它们的导出名称将是相同的，因为它们没有被破坏。我必须通过在它们的名字后面加上整型或浮点数来区分它们。因为它们没有被破坏，所以可以从C代码中调用它们，我们很快就会看到。</p>
<p>要像在C++源代码中那样查看被破坏的名称，我们可以在nm命令中使用-C (demangle)选项。同样，我将只复制输出相同的相关部分:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nm -C print.o</span></span><br><span class="line">0000000000000140 T printNum(float)</span><br><span class="line">0000000000000000 T printNum(int)</span><br><span class="line">                 U _printF</span><br><span class="line">                 U _printI</span><br><span class="line">00000000000001d0 T _printNumFloat</span><br><span class="line">00000000000001b0 T _printNumInt</span><br><span class="line">                 U std::__1::cout</span><br></pre></td></tr></table></figure>

<p>使用这个选项，我们看到的不是<code>__Z8printNumf</code>，而是printNum(float)，不是<code>__ZNSt3__14coutE</code>，而是<code>std::__1::cout</code>，这是更人性化的名称。</p>
<p>我们还看到C++代码调用了C代码:print.cpp调用了printI和pringF，它们是在print_num.h中声明为具有C链接的C函数。这可以从print.o的nm输出中看出。上面一些未定义的(U)符号:printF, printI和std::cout。那些未定义的符号应该在一个对象文件(或库)中提供，该对象文件将在链接阶段与这个对象文件输出链接在一起。</p>
<p>到目前为止，我们只是将源代码编译成目标代码，还没有链接。如果我们没有将包含这些导入符号定义的对象文件与此对象文件链接在一起，那么链接器将停止，并出现“丢失符号”错误。</p>
<p>还要注意，由于print.cpp是一个C++源文件，是用C++编译器(g++)编译的，因此其中的所有代码都被编译为C++代码。带有C链接的函数，如printNumInt和printNumFloat，也是可以使用C++特性的C++函数。只是符号的名称与C兼容，但代码是C++，这一点可以从两个函数都在调用重载函数(printNum)这一事实看出，如果在C中编译printNumInt或printNumFloat，就不会发生这种情况。</p>
<p>现在让我们看看 print.hpp，一个头文件，可以包含从C或C++源文件，它将允许从C和C++调用printNumInt和printNumFloat，以及从C++调用printNum:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">printNum</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">printNum</span><span class="params">(<span class="type">float</span> v)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumInt</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumFloat</span><span class="params">(<span class="type">float</span> v)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125; <span class="comment">// end extern &quot;C&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>如果我们从C源文件包括它，我们只想看到:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printNumInt</span><span class="params">(<span class="type">int</span> v)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printNumFloat</span><span class="params">(<span class="type">float</span> v)</span>;</span><br></pre></td></tr></table></figure>

<p>不能从C代码中看到printNum，因为它的名字被破坏了，所以我们没有(标准的和可移植的)方法来为C代码声明它。是的，我可以声明为:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __Z8printNumi(<span class="type">int</span> v);</span><br><span class="line"><span class="type">void</span> __Z8printNumf(<span class="type">float</span> v);</span><br></pre></td></tr></table></figure>

<p>链接器不会抱怨，因为这正是我当前安装的编译器为它发明的名称，但我不知道它是否适用于您的链接器(如果您的编译器生成了一个不同的错误名称)，甚至适用于我的链接器的下一个版本。我甚至不知道如果调用将按预期工作,因为不同的调用约定的存在(如何传递参数和返回值返回)。 它是与具体编译器相关的,可能是不同的C和C++调用(特别是对于C++函数成员函数和接收这个指针作为参数)。</p>
<p>编译器可能会对普通C++函数使用一种调用约定，如果它们被声明为具有extern “ C “链接，则使用另一种调用约定。因此，欺骗编译器说一个函数使用C调用约定，而实际上它使用C++，同时，如果每个函数使用的约定在编译工具链中碰巧不同，可能会产生意想不到的结果。</p>
<p>混合C和C++代码有标准的方法，从C中调用C++重载函数的标准方法是将它们封装在带有C链接的函数中，就像我们用printNumInt和printNumFloat封装printNum一样。</p>
<p>如果我们在一个C++源文件中引用print.hpp，<code>__cplusplus</code>预处理器宏将被定义，该文件将被视为:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNum</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNum</span><span class="params">(<span class="type">float</span> v)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumInt</span><span class="params">(<span class="type">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumFloat</span><span class="params">(<span class="type">float</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// end extern &quot;C&quot;</span></span><br></pre></td></tr></table></figure>

<p>这将允许C++代码调用重载函数printNum或其封装层printNumInt和printNumFloat。</p>
<p>现在让我们创建一个包含main函数的C源文件，它是程序的入口点。这个C主函数将调用printNumInt和printNumFloat，也就是说，将使用C链接调用这两个C++函数。记住，这些是C++函数(它们的函数体执行C++代码)，只是它们的名称没有被打乱。文件命名为c-main.c:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printNumInt</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printNumFloat</span>(<span class="number">1.5f</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译生成目标文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -c c-main.c</span></span><br></pre></td></tr></table></figure>

<p>并查看导入&#x2F;导出符号:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nm c-main.o</span></span><br><span class="line">0000000000000000 T _main</span><br><span class="line">                 U _printNumFloat</span><br><span class="line">                 U _printNumInt</span><br></pre></td></tr></table></figure>

<p>如预期的那样，它导出main并导入printNumFloat和printNumInt。</p>
<p>要将它们链接到一个可执行文件中，我们需要使用C++链接器(g++)，因为至少要链接的一个文件print.o是用c++编译的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ g++ -o c-app print_num.o print.o c-main.o</span><br></pre></td></tr></table></figure>

<p>执行产生预期的结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./c-app</span><br><span class="line">printNum: 1, printI: 1</span><br><span class="line">printNum: 1.5, printF: 1.5</span><br></pre></td></tr></table></figure>

<p>现在让我们尝试使用一个c++主文件，名为cpp-main.cpp:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;print.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printNum</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printNum</span>(<span class="number">1.5f</span>);</span><br><span class="line">    <span class="built_in">printNumInt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printNumFloat</span>(<span class="number">3.5f</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译并查看cpp-main的导入&#x2F;导出符号 cpp-main.o对象文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ g++ -c cpp-main.cpp</span><br><span class="line">$ nm -C cpp-main.o</span><br><span class="line">                 U printNum(float)</span><br><span class="line">                 U printNum(int)</span><br><span class="line">0000000000000000 T _main</span><br><span class="line">                 U _printNumFloat</span><br><span class="line">                 U _printNumInt</span><br></pre></td></tr></table></figure>

<p>它导出main，并导入C链接printNumFloat和printNumInt，以及两个被修改的printNum版本。</p>
<p>你可能想知道为什么主符号没有导出为一个像main(int, char**)这样的混乱符号从这个C++源文件，因为它是一个C++源文件，它没有定义为extern “C”。main是一个特殊的实现定义函数，无论它是在C或C++源文件中定义，我的实现似乎都选择使用C链接。</p>
<p>链接和运行程序会得到预期的结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ g++ -o cpp-app print_num.o print.o cpp-main.o</span><br><span class="line">$  ./cpp-app</span><br><span class="line">printNum: 1, printI: 1</span><br><span class="line">printNum: 1.5, printF: 1.5</span><br><span class="line">printNum: 3, printI: 3</span><br><span class="line">printNum: 3.5, printF: 3.5</span><br></pre></td></tr></table></figure>



<p>参考文献：</p>
<p>[1] <a href="https://en.wikipedia.org/wiki/Compiler">https://en.wikipedia.org/wiki/Compiler</a></p>
<p>[2] <a href="https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html">https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html</a></p>
<p>[3] <a href="http://www.cplusplus.com/doc/tutorial/introduction/">http://www.cplusplus.com/doc/tutorial/introduction/</a></p>
<p>[4] <a href="https://en.cppreference.com/w/cpp/compiler_support">https://en.cppreference.com/w/cpp/compiler_support</a></p>
<p>[5] <a href="https://docs.oracle.com/cd/E19957-01/806-3572/Using.html">https://docs.oracle.com/cd/E19957-01/806-3572/Using.html</a></p>
<p>[6] <a href="https://en.wikipedia.org/wiki/Name_mangling">https://en.wikipedia.org/wiki/Name_mangling</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
